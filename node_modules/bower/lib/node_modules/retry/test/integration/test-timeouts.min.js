var common=require("../common");var assert=common.assert;var retry=require(common.dir.lib+"/retry");(function testDefaultValues(){var timeouts=retry.timeouts();assert.equal(timeouts.length,10);assert.equal(timeouts[0],1e3);assert.equal(timeouts[1],2e3);assert.equal(timeouts[2],4e3)})();(function testDefaultValuesWithRandomize(){var minTimeout=5e3;var timeouts=retry.timeouts({minTimeout:minTimeout,randomize:true});assert.equal(timeouts.length,10);assert.ok(timeouts[0]>minTimeout);assert.ok(timeouts[1]>timeouts[0]);assert.ok(timeouts[2]>timeouts[1])})();(function testPassedTimeoutsAreUsed(){var timeoutsArray=[1e3,2e3,3e3];var timeouts=retry.timeouts(timeoutsArray);assert.deepEqual(timeouts,timeoutsArray);assert.notStrictEqual(timeouts,timeoutsArray)})();(function testTimeoutsAreWithinBoundaries(){var minTimeout=1e3;var maxTimeout=1e4;var timeouts=retry.timeouts({minTimeout:minTimeout,maxTimeout:maxTimeout});for(var i=0;i<timeouts;i++){assert.ok(timeouts[i]>=minTimeout);assert.ok(timeouts[i]<=maxTimeout)}})();(function testTimeoutsAreIncremental(){var timeouts=retry.timeouts();var lastTimeout=timeouts[0];for(var i=0;i<timeouts;i++){assert.ok(timeouts[i]>lastTimeout);lastTimeout=timeouts[i]}})();(function testTimeoutsAreIncrementalForFactorsLessThanOne(){var timeouts=retry.timeouts({retries:3,factor:.5});var expected=[250,500,1e3];assert.deepEqual(expected,timeouts)})();(function testRetries(){var timeouts=retry.timeouts({retries:2});assert.strictEqual(timeouts.length,2)})();