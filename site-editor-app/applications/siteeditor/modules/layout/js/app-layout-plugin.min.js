/**
 * @plugin.js
 * @App Layout Plugin JS
 *
 * @License: http://www.siteeditor.org/license
 * @Contributing: http://www.siteeditor.org/contributing
 */

/*global siteEditor:true */
siteEditor.PluginManager.add('appLayout', function(siteEditor) {
    var api = siteEditor.sedAppClass.editor , $ = siteEditor.dom.Sizzle;

    var initLayoutScopeControl = false;

    api.Events.bind( "afterInitAppendModulesSettingsTmpl" , function( moduleSettingsObj , currentElDialog ){

        var currentElement = $("#website")[0].contentWindow.jQuery( '[sed_model_id="' + api.currentTargetElementId + '"]' ),
            currentRow = currentElement.parents(".sed-pb-module-container:first").parent();

        var scopeEl = $( $("#layouts-scope-settings-button-tpl").html() ).prependTo( currentElDialog );

        if( !_.isUndefined( __layoutsScopeContent ) && !_.isEmpty( __layoutsScopeContent ) ) {
            $( __layoutsScopeContent ).prependTo( $("#dialog_page_box_main_layout_row_scope_control") );
        }else{
            $( $("#layouts-scope-settings-content-tpl").html() ).prependTo( $("#dialog_page_box_main_layout_row_scope_control") );
        }

        if( currentRow.parent().hasClass("site-main") ){
            scopeEl.show();
            var themeId = currentRow.data("themeId") ,
                order = currentRow.index();

            if( initLayoutScopeControl === false ){
                api.Events.trigger( "renderSettingsControls" , 'main_layout_row_scope_control' , api.settings.controls['main_layout_row_scope_control'] );
                initLayoutScopeControl = true;
            }

            var control = api.control.instance( "main_layout_row_scope_control" );

            if( !_.isUndefined( themeId ) && !_.isEmpty( themeId ) && themeId ){
                control.update( themeId  );
            }else{
                control.update( );
            }

        }else{
            scopeEl.hide();
        }

    });

    api.Events.bind( "afterAppendModulesSettingsTmpl" , function( moduleSettingsObj , currentElDialog ){
        var currentElement = $("#website")[0].contentWindow.jQuery( '[sed_model_id="' + api.currentTargetElementId + '"]' ),
            currentRow = currentElement.parents(".sed-pb-module-container:first").parent();

        $( __layoutsScopeContent ).prependTo( $("#dialog_page_box_main_layout_row_scope_control") );
        var scopeEl = $( "#sed-scope-settings-main_layout_row_scope_control" ).parents(".row_settings:first");

        if( currentRow.parent().hasClass("site-main") ){
            scopeEl.show();
            var themeId = currentRow.data("themeId") ,
                control = api.control.instance( "main_layout_row_scope_control" );

            if( !_.isUndefined( themeId ) && !_.isEmpty( themeId ) && themeId ){
                control.update( themeId  );
            }else{
                control.update( );
            }

        }else{
            scopeEl.hide();
        }

    });

    var __layoutsScopeContent;
    api.Events.bind( "beforeResetDialogSettingsTmpl" , function( settingsId ){
        __layoutsScopeContent = $("#dialog_page_box_main_layout_row_scope_control").children().detach();
    });

    api.Events.bind( "sedAfterThemeContentUpdate" , function(){
        var control = api.control.instance( "main_layout_row_scope_control" );
        if( !_.isUndefined( control ) && typeof control.updateLayoutsContent == "function" ){
            control.updateLayoutsContent();
            control.createThemeContent();
        }else{
            api( 'theme_content' ).set( api.pagesThemeContent[api.settings.page.id] );
        }
    });

    api.previewer.bind( "updateCurrentLayoutRowsOrders" , function( themeRows ){
        var control = api.control.instance( "main_layout_row_scope_control" );  console.log( "---------------themeRows-----------------" , themeRows );
        if( !_.isUndefined( control ) ){
            control.ordersRefresh( themeRows );
        }
    });

    api.previewer.bind( "sedRemoveRowFromLayouts" , function( themeId ){
        var control = api.control.instance( "main_layout_row_scope_control" );
        if( !_.isUndefined( control ) && typeof control.removeRowFromAllLayouts == "function" ){
            control.removeRowFromAllLayouts( themeId );
            control.removeRowFromLayoutsContent( themeId );
        }
    });

    api.previewer.bind("sedPagesLayoutsInfo" , function( info ){
        api.defaultPageLayout = info.defaultPageLayout;
    });

        //1.no public to public ----------- add theme_id to main shortcode model
        //2.public to no public ----------- remove theme_id from main shortcode model && remove related shortcodes from sed_layout_content
        //3.public to customize ------------ add is_customize to main shortcode model && not update in sed_layout_content
        //4.customize to public ------------ remove is_customize from main shortcode model && replce main shortcodes with customize shortcodes
        //5.hidden to customize ------------ remove is_hidden & add is_customize to main shortcode model && not update in sed_layout_content
        //6.customize to hidden ------------- remove is_customize & add is_hidden to main shortcode model && replce main shortcodes with customize shortcodes
        //7.hidden to public ------------ remove is_hidden from main shortcode model
        //8.public to hidden -------------  add is_hidden to main shortcode model

        /*
          confirm alert
          1. after convert public to private (customize or hidden or normal to private )
          2. after customize to hidden
          3. after customize to public
          4. after remove public row (customize or hidden or normal)
          5. after drag & drop public row to inner other modules
        */

        api.LayoutScopeControl = api.Control.extend({

    		ready: function() {
                var control = this;

                this.lastThemeId = parseInt( api.instance('sed_last_theme_id').get() );

                //this.subThemesContent = _.isEmpty( api('sed_layouts_content')() ) ? {} : api('sed_layouts_content')();

                this.currentLayout = !_.isEmpty( api('page_layout')() ) ? api('page_layout')() : api.defaultPageLayout;

                this.models = control.setting();

                control.publicScopeEl = control.container.find('[name="sed_layout_scope_public"]');

                control.sedScopeLayoutEl = control.container.find('[name="sed_scope_layout"]');

                control.layoutPublicTypeEl = control.container.find('[name="sed_layout_public_type"]');

                control.allLayoutCheckedEl = control.container.find('.sed-all-sub-themes-check-box > input');

                control.editLayoutRowsEl = control.container.find('.edit-layout-rows');

                control.layoutTitleInputEl = control.container.find('[name="sed_layout_row_title"]');

                this.lastLayoutPublicType = "normal";

                this.themeId = "";

                this.confirmDialogEl = $("#sed-confirm-message-dialog");

                this.confirmEventIds = {
                    "publicToPrivate"   : "changeScopePublicToPrivateConfirm" ,
                    "customizeToPublic" : "changeScopeCustomizeToPublicConfirm" ,
                    "customizeToHidden"    : "changeScopeCustomizeToHiddenConfirm" ,
                };

                api.previewer.bind( "ok_" + this.confirmEventIds.publicToPrivate , function(){ alert("publicToPrivate Ok");
                    control.changeScopePublicToPrivate();
                });

                api.previewer.bind( "cancel_" + this.confirmEventIds.publicToPrivate , function(){  alert("publicToPrivate Cancel");
                    $( control.selector ).find('[name="sed_layout_scope_public"]').prop("checked" , true);
                });

                api.previewer.bind( "ok_" + this.confirmEventIds.customizeToPublic , function(){
                    control.changeScopePublicTypes( "normal" , false );
                });

                api.previewer.bind( "ok_" + this.confirmEventIds.customizeToHidden , function(){
                    control.changeScopePublicTypes( "hidden" , false );
                });

                this.publicScopeEl.on("change" , function(){

                    if( $(this).prop('checked') ){
                        var container = $(this).parents("li:first");

                        //show public options like public type && all layout
                        container.find("ul.select-pubic-scope").removeClass("hide");

                        //"normal" public layout type is default value for public scope
                        control.updateRadioField( container.find('[name="sed_layout_public_type"]') , "normal" );
                        control.lastLayoutPublicType = "normal";

                        //show all layout && select current page layout AS default value for layouts in "normal" public layout type
                        container.find("ul.select-layouts-custom").removeClass("hide");
                        control.updateMultiCheckboxField( container.find('[name="sed_scope_layout"]') , [control.currentLayout] );

                        $( control.selector ).find('.select-layouts-custom .edit-layout-rows').addClass("hide");

                        //always disable current page layout for prevent user control , it's can not unchecked when current row has any public type scope
                        container.find('.sub-theme-item input[value="'+ control.currentLayout +'"]').prop("disabled" , true);

                        //create new theme id & add current row to public Layouts Model
                        control.themeId = control.generateThemeId();
                        control.addRowToModel( control.currentLayout );

                        /*
                        * @Event
                        * @Name : sedLayoutChangeScope
                        * @args : @type
                        */
                        api.previewer.send( 'sedLayoutChangeScope' , {
                            'type'          : 'privateToPublic'  ,
                            'elementId'     : api.currentTargetElementId ,
                            'themeId'       : control.themeId
                        });

                        control.refresh();
                    }else{

                        control.confirmDialogEl.dialog("open");

                        control.confirmDialogEl.data( "confirmEventId" , control.confirmEventIds.publicToPrivate );

                        control.confirmDialogEl.html( $( "#change-public-to-private-confirm-tpl" ).html() );

                    }

                });

                this.layoutTitleInputEl.on("change keyup" , function(){
                    var title = $(this).val();
                    $( control.selector ).find('.select-layouts-custom input[name="sed_scope_layout"]').each(function(){
                        control.updateRowTitle( $(this).val() , control.themeId , title  );
                    });
                });

                this.layoutPublicTypeEl.on("change" , function(){
                    var type = $(this).val();
                    control.changeScopePublicTypes( type );
                });

                this.sedScopeLayoutEl.livequery( function(){
                    var $this = $(this)
                    $this.on("change" , function(){

                        if( $(this).prop('checked') ){

                            control.addRowToModel( $(this).val() );

                            control.updateRowTitle( $(this).val() , control.themeId , control.layoutTitleInputEl.val()  );

                            if( $( control.selector ).find('.select-layouts-custom input[name="sed_scope_layout"]').length == control.container.find("ul.select-layouts-custom .sub-theme-item input:checked").length ){
                                control.allLayoutCheckedEl.prop( "checked" , true );
                            }

                            $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").removeClass("hide");

                        }else{
                            control.removeRowFromModel( $(this).val() );
                            control.allLayoutCheckedEl.prop( "checked" , false );
                            $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").addClass("hide");
                        }

                        control.refresh();
                    });
                });


                this.allLayoutCheckedEl.on("change" , function(){
                    var sedScopeLayoutEl = $(this).parents(".select-layouts-custom:first").find('[name="sed_scope_layout"]');

                    if( $(this).prop('checked') ){
                        sedScopeLayoutEl.prop( "checked" , true );


                        sedScopeLayoutEl.each(function(){
                            var layout = $(this).val();

                            if( layout != control.currentLayout )
                                $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").removeClass("hide");

                            if( !control.existThemeIdInLayout( layout ) ){
                                control.addRowToModel( layout );
                            }
                        });

                    }else{
                        sedScopeLayoutEl.prop( "checked" , false );

                        sedScopeLayoutEl.each(function(){
                            var layout = $(this).val();
                            $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").addClass("hide");

                            if( layout == control.currentLayout ){
                                $(this).prop( "checked" , true );
                                return ;
                            }

                            if( control.existThemeIdInLayout( layout ) ){
                                control.removeRowFromModel( layout );
                            }
                        });

                    }

                    control.refresh();
                });

                this.editLayoutRowsEl.livequery( function(){
                    $(this).on("click" , function(){

                        $( "#sed-edit-layout-rows-dialog" ).dialog("open");
                        $( "#sed-edit-layout-rows-dialog" ).html("");

                        var layout = $(this).data("layoutName") ,
                            template = api.template( "sed-layout-edit-rows" ),
                            content = template({
                                layoutRows  : control.models[layout] ,
                                noTitle     : api.I18n.no_title ,
                                currThemeId : control.themeId
                            });

                        $( "#sed-edit-layout-rows-dialog" ).data("layoutName" , layout);

                        $( "#sed-edit-layout-rows-dialog" ).html( content );

                    });
                });

                $( "#sed-edit-layout-rows-dialog" ).find(".layout-row-container").livequery( function(){
                    $(this).sortable({
                        update : function( e , ui){
                            var currValue = [] ,
                                order = 0 ,
                                themeRows = {};

                            $( "#sed-edit-layout-rows-dialog" ).find(".layout-row-container > .sed-layout-row-box").each(function(){
                                var themeId = $(this).data("rowId");
                                themeRows[themeId] = {
                                    order : order,
                                };
                                order++;
                            });

                            var layout = $( "#sed-edit-layout-rows-dialog" ).data("layoutName");

                            control.ordersRefresh( themeRows , layout );

                        }
                    }).disableSelection();
                });
            },

            changeScopePublicToPrivate : function(){
                var control = this;

                var leyouts = this.getLayoutsByThemeId( control.themeId );

                _.each( leyouts , function( leyout ){
                    control.removeRowFromModel( leyout );
                });

                control.container.find("ul.select-pubic-scope").addClass("hide");
                /*
                * @Event
                * @Name : sedLayoutChangeScope
                * @args : @type
                */
                api.previewer.send( 'sedLayoutChangeScope' , {
                    'type'          : 'publicToPrivate'  ,
                    'elementId'     : api.currentTargetElementId ,
                    'themeId'       : control.themeId
                });

                control.refresh();
            },

            changeScopePublicTypes : function( type , showConfirm ){
                var control = this;

                showConfirm = ( !_.isUndefined( showConfirm ) ) ? showConfirm : true;
                switch ( type ) {
                  case "normal":

                      if( control.lastLayoutPublicType == "customize" && showConfirm === true ){

                          control.confirmDialogEl.dialog("open");

                          control.confirmDialogEl.data( "confirmEventId" , control.confirmEventIds.customizeToPublic );

                          control.confirmDialogEl.html( $( "#change-customize-to-public-confirm-tpl" ).html() );

                          return true;
                      }

                      control.container.find("ul.select-layouts-custom").removeClass("hide");

                      switch ( control.lastLayoutPublicType ) {
                        case "customize":
                            var usingDataMode = $(".select-customize-to-public-data-mode").find('[name="change-customize-to-public-mode"]:checked').val();
                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          : 'customizeToPublic'  ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId ,
                                'usingDataMode' : usingDataMode
                            });
                        break;
                        case "hidden":
                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          : 'hiddenToPublic'  ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId
                            });
                        break;
                      }

                  break;
                  case "customize":
                      control.updateExcludeRows( "add" );
                      control.container.find("ul.select-layouts-custom").addClass("hide");

                      switch ( control.lastLayoutPublicType ) {
                        case "normal":
                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          : 'publicToCustomize' ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId
                            });
                        break;
                        case "hidden":
                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          : 'hiddenToCustomize' ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId
                            });
                        break;
                      }

                  break;
                  case "hidden":

                      if( control.lastLayoutPublicType == "customize" && showConfirm === true ){

                          control.confirmDialogEl.dialog("open");

                          control.confirmDialogEl.data( "confirmEventId" , control.confirmEventIds.customizeToHidden );

                          control.confirmDialogEl.html( $( "#change-customize-to-hidden-confirm-tpl" ).html() );

                          return true;
                      }

                      control.updateHiddenRows( "add" );
                      control.container.find("ul.select-layouts-custom").addClass("hide");

                      switch ( control.lastLayoutPublicType ) {
                        case "customize":

                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          :  'customizeToHidden'  ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId
                            });
                        break;
                        case "normal":
                            /*
                            * @Event
                            * @Name : sedLayoutChangeScope
                            * @args : @type
                            */
                            api.previewer.send( 'sedLayoutChangeScope' , {
                                'type'          : 'publicToHidden' ,
                                'elementId'     : api.currentTargetElementId ,
                                'themeId'       : control.themeId
                            });
                        break;
                      }

                  break;
                }



                switch ( control.lastLayoutPublicType ) {
                  case "customize":
                      control.updateExcludeRows( "remove" );
                  break;
                  case "hidden":
                      control.updateHiddenRows( "remove" );
                  break;
                }

                control.refresh();
                control.lastLayoutPublicType = type;
            },

            //update radio fields & multi checkboxes field
            updateRadioField : function( element , to ) {
      			element.filter( function() {
      				return this.value === to;
      			}).prop( 'checked', true );
            },

            updateMultiCheckboxField : function( element , to ) {
                if( _.isEmpty( to ) || !_.isArray( to ) )
                    return ;

      			element.filter( function() {
      				return $.inArray( this.value , to ) > -1;
      			}).prop( 'checked', true );

      			element.filter( function() {
      				return $.inArray( this.value , to ) == -1;
      			}).prop( 'checked', false );

            },

            //refresh orders in Layouts row and current page row
            ordersRefresh : function( themeRows , layout ){
                var control = this;

                layout = ( !_.isUndefined( layout ) && layout ) ? layout :  control.currentLayout;

                if( !_.isEmpty( themeRows ) ){

                    control.models[layout] = _.map( control.models[layout] , function( options ){

                        if( $.inArray( options.theme_id , _.keys( themeRows ) ) != -1 ){
                            options.order = themeRows[options.theme_id].order;
                        }

                        return options;
                    });

                    control.refresh();
                }

            },

            getMultiCheckboxVal : function( element ) {
                var val = [];

                element.filter(":checked").each(function(){
                     val.push( $(this).val() );
                });

                return val;
            },

            refresh : function(  ) {
                console.log( "refresh this.models ------------------------" , this.models );
                this.setting.set( this.models );
            },

            update : function( themeId ) {
                var control = this;

                var layouts = !_.isUndefined( themeId ) ? this.getLayoutsByThemeId( themeId ) : [] ,
                    publicScopeEl = $( control.selector ).find('[name="sed_layout_scope_public"]') ,
                    layoutPublicTypeEl =  $( control.selector ).find('[name="sed_layout_public_type"]') ,
                    sedScopeLayoutEl = $( control.selector ).find('[name="sed_scope_layout"]');

                if( _.isEmpty( layouts ) ){

                    publicScopeEl.prop( "checked" , false );
                    $( control.selector ).find("ul.select-pubic-scope").addClass("hide");
                    control.allLayoutCheckedEl.prop( "checked" , false );
                    $( control.selector ).find('.select-layouts-custom .edit-layout-rows').addClass("hide");

                }else if( $.inArray( this.currentLayout , layouts ) == -1 ){

                    publicScopeEl.prop( "checked" , false );
                    $( control.selector ).find("ul.select-pubic-scope").addClass("hide");
                    control.allLayoutCheckedEl.prop( "checked" , false );
                    $( control.selector ).find('.select-layouts-custom .edit-layout-rows').addClass("hide");

                    this.themeId = themeId;
                    _.each( leyouts , function( leyout ){
                        control.removeRowFromModel( leyout );
                    });

                }else{
                    this.themeId = themeId;

                    publicScopeEl.prop( "checked" , true );
                    $( control.selector ).find("ul.select-pubic-scope").removeClass("hide");

                    this.updateMultiCheckboxField( sedScopeLayoutEl , layouts );

                    $( control.selector ).find('.sub-theme-item input[value="'+ control.currentLayout +'"]').prop("disabled" , true);

                    if( this.isCustomize() ){
                        $( control.selector ).find("ul.select-layouts-custom").addClass("hide");
                        this.updateRadioField( layoutPublicTypeEl , "customize" );
                    }else if( this.isHidden() ){
                        $( control.selector ).find("ul.select-layouts-custom").addClass("hide");
                        this.updateRadioField( layoutPublicTypeEl , "hidden" );
                    }else{
                        $( control.selector ).find("ul.select-layouts-custom").removeClass("hide");
                        this.updateRadioField( layoutPublicTypeEl , "normal" );
                    }

                    $( control.selector ).find('.select-layouts-custom input[name="sed_scope_layout"]').each( function(){
                        if( $(this).prop('checked') && $(this).val() != control.currentLayout ){
                            $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").removeClass("hide");
                        }else{
                            $(this).parents(".sub-theme-item:first").find(".edit-layout-rows").addClass("hide");
                        }
                    });

                    if( $( control.selector ).find('.select-layouts-custom input[name="sed_scope_layout"]').length == layouts.length ){
                        control.allLayoutCheckedEl.prop( "checked" , true );
                    }else{
                        control.allLayoutCheckedEl.prop( "checked" , false );
                    }

                }

            },

            getLayoutsByThemeId : function( themeId ){
                var control = this , layouts = [];

                $.each( this.models , function( layout , rows ){
                    $.each( rows , function( idx , options ){
                        if( options.theme_id ==  themeId)
                            layouts.push( layout );
                    });
                });

                return layouts;
            },

            isCustomize : function( themeId , layout ){
                var isCustom = false;

                themeId = ( _.isUndefined( themeId ) || !themeId ) ? this.themeId : themeId;

                layout = ( _.isUndefined( layout ) || !layout ) ? this.currentLayout : layout;

                _.each( this.models[layout] , function( options ){
                    if( options.theme_id ==  themeId){
                        var index = $.inArray( api.currentPageInfo.id , options.exclude );
                        if( index > -1 ){
                            isCustom = true;
                            return false;
                        }
                    }
                });
                return isCustom;
            },

            isHidden : function( themeId , layout ){
                var isHide = false;

                themeId = ( _.isUndefined( themeId ) || !themeId ) ? this.themeId : themeId;

                layout = ( _.isUndefined( layout ) || !layout ) ? this.currentLayout : layout;

                _.each( this.models[layout] , function( options ){
                    if( options.theme_id ==  themeId){
                        var index = $.inArray( api.currentPageInfo.id , options.hidden );
                        if( index > -1 ){
                            isHide = true;
                            return false;
                        }
                    }
                });
                return isHide;
            },

            updateRowTitle : function( layout , themeId , title ){
                var control = this;

                this.models[layout] = _.map( this.models[layout] , function( options ){
                    if( options.theme_id == themeId ){
                        options.title = title;
                        return options;
                    }else
                        return options;

                });

                control.refresh();
            },

            updateExcludeRows : function( type ){
                var control = this;

                this.models[control.currentLayout] = _.map( this.models[control.currentLayout] , function( options ){
                    if( options.theme_id == control.themeId ){
                        var index = $.inArray( api.currentPageInfo.id , options.exclude );

                        if( type == "add" && index == -1 ){
                            options.exclude.push( api.currentPageInfo.id );
                        }

                        if( type == "remove" && index != -1 ){
                            options.exclude.splice( index , 1 );
                        }

                        return options;
                    }else
                        return options;

                });

            },

            updateHiddenRows : function( type ){
                var control = this;

                this.models[control.currentLayout] = _.map( this.models[control.currentLayout] , function( options ){
                    if( options.theme_id == control.themeId ){
                        var index = $.inArray( api.currentPageInfo.id , options.hidden );

                        if( type == "add" && index == -1 ){
                            options.hidden.push( api.currentPageInfo.id );
                        }

                        if( type == "remove" && index != -1 ){
                            options.hidden.splice( index , 1 );
                        }

                        return options;
                    }else
                        return options;

                });

            },

            generateThemeId : function( ){

                this.lastThemeId += 1;

                api('sed_last_theme_id').set( this.lastThemeId );

                return "theme_id_" + this.lastThemeId;

            },

            removeRowFromModel : function( leyout ){
                var control = this;
                this.models[leyout] = _.filter( this.models[leyout] , function( row ){
                    return row.theme_id != control.themeId;
                });

            },

            removeRowFromAllLayouts : function( themeId ){

                var control = this;

                _.each( this.models , function( rows , leyout ){
                    control.models[leyout] = _.filter( control.models[leyout] , function( row ){
                        return row.theme_id != themeId;
                    });
                });

            },

            existThemeIdInLayout : function( leyout ){
                var control = this;
                if( _.isUndefined( this.models[leyout] ) ){
                    return false;
                }

                var exist = false;

                _.each( this.models[leyout] , function( layoutModel ){
                    if( layoutModel.theme_id == control.themeId ){
                        exist = true;
                        return false;
                    }
                });

                return exist;
            },

            addRowToModel : function( leyout ){
                var control = this ,
                    options = {
                        order       : 0 ,
                        theme_id    : this.themeId ,
                        exclude     : [] , // this row not show in pages with this ids
                        hidden      : [] ,
                        title       : ""
                    };

                if( _.isUndefined( this.models[leyout] ) )
                    this.models[leyout] = [];

                this.models[leyout].push( options );

            },

            updateLayoutsContent : function(){
                var control = this;

                var layoutsContent = api('sed_layouts_content')(),
                    themeContent = {};

                _.each( api.pagesThemeContent[api.settings.page.id] , function( shortcode , index ){

                    if( !_.isUndefined( shortcode.theme_id ) && _.isUndefined( shortcode.is_customize ) ){

                        var tChildren = control.findAllTreeChildrenShortcode(  api.pagesThemeContent[api.settings.page.id] , shortcode.id ),
                            rowShortcodes = _.map( tChildren , _.clone );//$.extend( true, {} , tChildren );

                        rowShortcodes.unshift( shortcode );

                        layoutsContent[shortcode.theme_id] = rowShortcodes;

                    }

                });

                console.log( "-----------control.layoutsContent--------------" , layoutsContent );

                api( 'sed_layouts_content' ).set( layoutsContent );
            },

            removeRowFromLayoutsContent : function( themeId ){
                var control = this;

                var layoutsContent = api('sed_layouts_content')();

                delete layoutsContent[themeId];

                console.log( "-----------control.layoutsContent--------------" , layoutsContent );

                api( 'sed_layouts_content' ).set( layoutsContent );
            },

            findAllTreeChildrenShortcode: function( shortcodesModels , parent_id ){
                var control = this , allChildren = [];

                $.each( shortcodesModels , function(index , shortcode){
                    if(shortcode.parent_id == parent_id){
                        allChildren.push(shortcode);
                        allChildren = $.merge( allChildren , control.findAllTreeChildrenShortcode( shortcodesModels , shortcode.id  ) );
                    }
                });

                return allChildren;
            },

            createThemeContent : function(){
                var control = this ,
                    pagesThemeContent = _.map( api.pagesThemeContent[api.settings.page.id] , _.clone );

                _.each( pagesThemeContent , function( shortcode , index ){

                    if( !_.isUndefined( shortcode.theme_id ) && _.isUndefined( shortcode.is_customize ) ){

                        var tChildren = control.findAllTreeChildrenShortcode( pagesThemeContent , shortcode.id ),
                            rowShortcodes = _.map( tChildren , _.clone );//$.extend( true, {} , tChildren );

                        rowShortcodes.unshift( shortcode );

                        var newIndex = control.getShortcodeIndex(shortcode.id , pagesThemeContent );

                        control.deleteModule( shortcode.id , tChildren , pagesThemeContent , newIndex );

                    }
                });

                api( 'theme_content' ).set( pagesThemeContent );

            },

            getShortcodeIndex: function( id , contentModel ){

                var index;

                $.each(contentModel , function(i , shortcode){
                    if(shortcode.id == id){
                        index = i;
                        return false;
                    }
                });

                return index;
            },

            deleteModule : function(parent_id , tChildren , contentModel , index ){

                for(var j=0; j < tChildren.length ; j++) {
                    for(var i=0; i < contentModel.length ; i++) {
                        var shortcode = contentModel[i];

                        if( shortcode.id == tChildren[j].id ){
                            contentModel.splice( i , 1 );
                            break;
                        }
                    }
                }

                if(index !== false)
                    contentModel.splice( index , 1 );

            },

       });

        api.controlConstructor = $.extend( api.controlConstructor, {
            layout_scope : api.LayoutScopeControl
        });

   $( function() {

        $( "#sed-dialog-sub-themes-settings" ).dialog({
            autoOpen: false,
            width: 295,
            height: 295 ,
            resizable: false
        });

        $( "#sed-edit-layout-rows-dialog" ).dialog({
            autoOpen: false,
            width: 295,
            height: 295 ,
            resizable: false
        });

        var confirmActionType = "cancel";
        $("#sed-confirm-message-dialog").dialog({
            autoOpen      : false,
            modal         : true,
            width         : 700,
            //height        : 300 ,   default is "auto"
            resizable     : false ,
            close         : function(){
                if( confirmActionType == "cancel" ){
                    var confirmEventId = $(this).data("confirmEventId");
                    api.previewer.trigger( "cancel_" + confirmEventId );
                    $( this ).html("");
                }else{
                    confirmActionType = "cancel";
                }
            },
            buttons: [
                {
                    text: api.I18n.ok_confirm,
                    click: function() {
                        confirmActionType = "ok";
                        $( this ).dialog( "close" );
                        var confirmEventId = $(this).data("confirmEventId");
                        api.previewer.trigger( "ok_" + confirmEventId );
                        $( this ).html("");
                    }
                },
                {
                    text:  api.I18n.cancel_confirm,
                    click: function () {
                        confirmActionType = "cancel";
                        $(this).dialog("close");
                    }
                }
            ]
        });

        $("#sed-app-control-main_layout_row_scope_control").find("ul.select-layouts-custom").livequery(function(){

            var template = api.template( "sed-all-layouts-checkbox-scope" ),
                content = template( { layoutsSettings : api('sed_layouts_settings')() } );

            $(this).find(">li.sub-theme-item").remove();
            $( content ).appendTo( $(this) );

        });

        $( "#page_layout" ).click(function() {
            $( "#sed-dialog-sub-themes-settings" ).dialog( "open" );
        });


   });
});