(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppLayouts = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            this.ready();
        },

        ready : function(){
            var self = this ,
                postId = $(".site-main").data("postId");

            this.postId = postId;

            api.preview.bind( "sedLayoutChangeScope" , function( obj ){
                var type = obj.type ,
                    elementId = obj.elementId ,
                    themeId = obj.themeId ;

                var rowElement = $('[sed_model_id=" + elementId + "]').parents(".sed-pb-module-container:first").parent();

                switch( type ){
                    case "privateToPublic" :
                        self.privateToPublic( rowElement , themeId , elementId );
                        break;
                    case "publicToPrivate" :
                        self.publicToPrivate( rowElement , themeId , elementId );
                    break;
                    case "customizeToPublic" :
                        self.customizeToPublic( rowElement , themeId , elementId );
                    break;
                    case "hiddenToPublic" :
                        self.hiddenToPublic( rowElement , themeId , elementId );
                    break;
                    case "publicToCustomize" :
                        self.publicToCustomize( rowElement , themeId , elementId );
                    break;
                    case "hiddenToCustomize" :
                        self.hiddenToCustomize( rowElement , themeId , elementId );
                    break;
                    case "customizeToHidden" :
                        self.customizeToHidden( rowElement , themeId , elementId );
                    break;
                    case "publicToHidden" :
                        self.publicToHidden( rowElement , themeId , elementId );
                    break;
                }

            });

            api.preview.bind( 'active', function() {

                api.preview.send( "sedPagesLayoutsInfo" , {
                    defaultPageLayout    : api.defaultPageLayout
                });

            });

            /*api.preview.bind( "sedSave", function() {
                self.initDataThemeId();
            });*/


            api.Events.bind( "afterCreateModule" , function( moduleWrapper , moduleName ){
                if( moduleWrapper.parent().hasClass("site-main") ){
                    self.setBeforeThemeId( moduleWrapper );
                }
            });

            var isRemoveRow = false ,
                removedThemeId = false;

            api.Events.bind( "sedBeforeRemove" , function( elementId ){

                if( $("#" + elementId).parent().hasClass("site-main") ){
                    isRemoveRow = true;

                    if( $("#" + elementId).data("themeId") ){
                        removedThemeId = $("#" + elementId).data("themeId");
                    }

                }

            });

            api.Events.bind( "sedAfterRemove" , function( elementId ){
                if( isRemoveRow === true ){
                    isRemoveRow = false;

                    if( removedThemeId !== false ){

                        self.removeRowFromLayouts( removedThemeId );
                        self.ordersRefresh();

                        api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                            if( !_.isUndefined( shortcode.before_theme_id ) && shortcode.before_theme_id == removedThemeId ){
                                var themeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                                shortcode.before_theme_id = themeId;
                                return shortcode;
                            }else
                                return shortcode;
                        });

                        api.contentBuilder.sendData( "theme" );

                        removedThemeId = false;
                    }

                }
            });

            api.Events.bind( "sedAfterDuplicate" , function( elementId , newElement ){

                if( newElement.parent().hasClass("site-main") ){
                    self.setBeforeThemeId( newElement );
                }

            });

            var startInRoot, stopInRoot;
            api.Events.bind( "moduleSortableStartEvent" , function( ui ){
                var item = ui.item;
                if( item.parent().hasClass("site-main") )
                    startInRoot = true;
                else
                    startInRoot = false;
            });

            api.Events.bind( "moduleSortableStopEvent" , function( ui ){
                var item = ui.item ;
                if( item.parent().hasClass("site-main") )
                    stopInRoot = true;
                else
                    stopInRoot = false;


                if( startInRoot === true && stopInRoot === true ){

                    self.ordersRefresh();

                    api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                        if( !_.isUndefined( shortcode.before_theme_id ) ){
                            var themeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                            shortcode.before_theme_id = themeId;
                            return shortcode;
                        }else
                            return shortcode;
                    });

                    api.contentBuilder.sendData( "theme" );

                }else if( startInRoot === true && stopInRoot === false ){
                    var themeId = false;

                    if( item.data("themeId") )
                        themeId = item.data("themeId");

                    if( themeId !== false ){

                        self.removeRowFromLayouts( themeId );
                        self.ordersRefresh();
                        self.publicToPrivate( item , themeId  );

                        api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                            if( !_.isUndefined( shortcode.before_theme_id ) && shortcode.before_theme_id == themeId ){
                                var newThemeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                                shortcode.before_theme_id = newThemeId;
                                return shortcode;
                            }else
                                return shortcode;
                        });

                        api.contentBuilder.sendData( "theme" );

                    }else{
                        self.ordersRefresh();

                        api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                            if( !_.isUndefined( shortcode.before_theme_id ) && item.attr("sed_model_id") == shortcode.id ){

                                delete shortcode.before_theme_id;
                                return shortcode;

                            }else
                                return shortcode;
                        });

                        api.contentBuilder.sendData( "theme" );

                    }

                }else if( startInRoot === false && stopInRoot === true ){

                    api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                        if( item.attr("sed_model_id") == shortcode.id ){

                            var newThemeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                            shortcode.before_theme_id = newThemeId;

                            return shortcode;

                        }else
                            return shortcode;
                    });

                    api.contentBuilder.sendData( "theme" );

                }
            });

        },

        privateToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "themeId" , themeId );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    rowShortcode = shortcode;
                    shortcode.theme_id = themeId;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        publicToPrivate : function( rowElement , themeId ){
            var self= this;

            rowElement.removeData( "themeId" );
            rowElement.removeData( "staticThemeOrder" );
            rowElement.removeData( "themeOrder" );
            rowElement.removeData( "isCustomize" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    delete shortcode.theme_id = themeId;

                    if( !_.isUndefined( shortcode.is_customize ) )
                        delete shortcode.is_customize;

                    if( !_.isUndefined( shortcode.is_hidden ) )
                        delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        customizeToPublic : function( rowElement , themeId , elementId ){



        },


        hiddenToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.is_hidden ) ){
                    delete shortcode.is_hidden;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        publicToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    shortcode.is_customize = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        hiddenToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) && !_.isUndefined( shortcode.is_hidden ) ){

                    shortcode.is_customize = true;
                    delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        customizeToHidden : function( rowElement , themeId , elementId ){

        },

        publicToHidden : function( rowElement , themeId , elementId ){
            var self= this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    shortcode.is_hidden = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },

        removeRowFromLayouts : function( themeId ){
            api.preview.send( "sedRemoveRowFromLayouts" , themeId );

            //remove from sed theme shortcodes content

        },
        //refresh orders in subthemes row and current page row
        ordersRefresh : function(){
            var self = this ,
                themeRows = {},
                staticThemeOrder;

            $( ".site-main > .sed-row-pb" ).each( function( index , el ){
                if( !_.isUndefined(  $(this).data("staticThemeOrder") ) ){

                    staticThemeOrder[$(this).data("themeId")] = $(this).data("staticThemeOrder");
                }
            });

            var order = 0;
            $( ".site-main > .sed-row-pb" ).each( function( index , el ){

                if( !_.isUndefined( $(this).data("themeId") ) ){
                    var themeId = $(this).data("themeId");

                    if( $.inArray( themeId , _.keys( staticThemeOrder ) ) > -1 ){

                        themeRows[themeId] = {
                            order: staticThemeOrder[themeId]
                        };

                    }else {

                        if( $.inArray( order , _.values( staticThemeOrder ) ) > -1 ){
                            order++;
                        }

                        $(this).data("themeOrder" , order );

                        themeRows[themeId] = {
                            order: order
                        };

                        order++;
                    }

                }

            });

            api.preview.send( "updateCurrentLayoutRowsOrders" , themeRows );
        },

        setBeforeThemeId : function( element ){
            var self = this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == element.attr("sed_model_id") && _.isUndefined( shortcode.theme_id ) ){
                    var themeId = self.getNextClosestThemeRowId( element );
                    shortcode.before_theme_id = themeId;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },

        getNextClosestThemeRowId : function(element){

            if( !element.parent().hasClass("site-main") ){
                alert("this element is not a theme row");
                return false;
            }

            themeId = "";

            element.nextAll(".sed-row-pb").each( function( index , rowEl ){
                if( !_.isUndefined(  $(this).data("themeId") ) ){
                    themeId = $(this).data("themeId") );
                    return false;
                }
            });

            return themeId;
        }

    });


    $( function() {

        api.defaultSubTheme   = window._sedAppDefaultPageLayout;

        api.defaultPageLayout = new api.AppLayouts({});

    });

}(sedApp, jQuery));