(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppSubThemes = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            this.ready();
        },

        ready : function(){
            var self = this ,
                postId = $(".site-main").data("postId");

            this.postId = postId;

            api.preview.bind( "sedLayoutChangeScope" , function( obj ){
                var type = obj.type ,
                    elementId = obj.elementId ,
                    themeId = obj.themeId ;

                var rowElement = $('[sed_model_id=" + elementId + "]').parents(".sed-pb-module-container:first").parent();

                switch( type ){
                    case "privateToPublic" :
                        self.privateToPublic( rowElement , themeId , elementId );
                        break;
                    case "publicToPrivate" :
                        self.publicToPrivate( rowElement , themeId , elementId );
                    break;
                    case "customizeToPublic" :
                        self.customizeToPublic( rowElement , themeId , elementId );
                    break;
                    case "hiddenToPublic" :
                        self.hiddenToPublic( rowElement , themeId , elementId );
                    break;
                    case "publicToCustomize" :
                        self.publicToCustomize( rowElement , themeId , elementId );
                    break;
                    case "hiddenToCustomize" :
                        self.hiddenToCustomize( rowElement , themeId , elementId );
                    break;
                    case "customizeToHidden" :
                        self.customizeToHidden( rowElement , themeId , elementId );
                    break;
                    case "publicToHidden" :
                        self.publicToHidden( rowElement , themeId , elementId );
                    break;
                }

            });

            api.preview.bind( 'active', function() {
                self.sendCurrentMainContent();
                api.preview.send( "currentPageSubTheme" , {
                    page_id     : api.currentPageInfo.id ,
                    subTheme    : self.currentSubTheme
                });
            });

            api.preview.bind( "sedSave", function() {
                self.initDataThemeId();
            });


            api.Events.bind( "afterCreateModule" , function( moduleWrapper , moduleName ){
                if( moduleWrapper.parent().hasClass("site-main") ){
                    self.ordersRefresh();
                }
            });

            var isRemoveRow = false ,
                removedThemeId = false;
            api.Events.bind( "sedBeforeRemove" , function( elementId ){

                if( $("#" + elementId).parent().hasClass("site-main") ){
                    isRemoveRow = true;

                    if( $("#" + elementId).data("themeId") ){
                        var findedInExclude = false;

                        self.subThemes[self.currentSubTheme] = _.each( self.subThemes[self.currentSubTheme] , function( options ){
                            if( options.theme_id == $("#" + elementId).data("themeId") ){
                                var index = $.inArray( api.currentPageInfo.id , options.exclude );
                                if( index > -1 )
                                    findedInExclude = true;
                            }
                        });

                        if( findedInExclude === false ){
                            removedThemeId = $("#" + elementId).data("themeId");
                        }

                    }

                }

            } );

            api.Events.bind( "sedAfterRemove" , function( elementId ){
                if( isRemoveRow === true ){
                    self.ordersRefresh();
                    isRemoveRow = false;

                    if( removedThemeId !== false ){

                        $.each( self.subThemes , function( subTheme , rows ){
                            self.removeRowFromSubTheme( subTheme , removedThemeId );
                        });
                        removedThemeId = false;

                        self.sendData();
                    }

                }
            });

            api.Events.bind( "sedAfterDuplicate" , function( elementId , newElement ){

                if( newElement.parent().hasClass("site-main") ){   alert("test");
                    self.ordersRefresh();
                }

            });

            var startInRoot, stopInRoot;
            api.Events.bind( "moduleSortableStartEvent" , function( ui ){
                var item = ui.item;
                if( item.parent().hasClass("site-main") )
                    startInRoot = true;
                else
                    startInRoot = false;
            });

            api.Events.bind( "moduleSortableStopEvent" , function( ui ){
                var item = ui.item ;
                if( item.parent().hasClass("site-main") )
                    stopInRoot = true;
                else
                    stopInRoot = false;


                if( startInRoot === true && stopInRoot === true ){
                    self.ordersRefresh();
                }else if( startInRoot === true && stopInRoot === false ){
                    var themeId = false;

                    if( item.data("themeId") )
                        themeId = item.data("themeId");

                    self.ordersRefresh();

                    if( themeId !== false ){
                        var data = self.getRowSubThemesData( themeId );

                        item.data("lastSubThemesData" , data );
                        item.data("lastThemeId" , themeId );

                        $.each( self.subThemes , function( subTheme , rows ){

                            self.removeRowFromSubTheme( subTheme , themeId );

                            self.removeDataThemeIdFromRow( themeId , item.attr("id") );

                        });
                    }

                }else if( startInRoot === false && stopInRoot === true ){

                    self.ordersRefresh();

                    var themeId = item.data("lastThemeId");

                    if( themeId ){
                        var data = item.data("lastSubThemesData" ),
                            elementId = item.attr("id");

                        $.each( data , function( subTheme , options ){

                            if( $.inArray( subTheme , _.keys( self.subThemes ) ) == -1 )
                                self.subThemes[subTheme] = [];

                            var order    = options.order ,
                                pageRowOrder = $( ".site-main > .sed-row-pb" ).index( item );

                            self.addRowToSubTheme( subTheme , order , themeId , elementId , pageRowOrder , options.exclude );

                        });

                    }

                }
            });

        },

        privateToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "themeId" , themeId );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    rowShortcode = shortcode;
                    shortcode.theme_id = themeId;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        publicToPrivate : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.removeData( "themeId" );
            rowElement.removeData( "staticThemeOrder" );
            rowElement.removeData( "themeOrder" );
            rowElement.removeData( "isCustomize" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    delete shortcode.theme_id = themeId;

                    if( !_.isUndefined( shortcode.is_customize ) )
                        delete shortcode.is_customize;

                    if( !_.isUndefined( shortcode.is_hidden ) )
                        delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        customizeToPublic : function( rowElement , themeId , elementId ){



        },


        hiddenToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.is_hidden ) ){
                    delete shortcode.is_hidden;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        publicToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    shortcode.is_customize = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        hiddenToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) && !_.isUndefined( shortcode.is_hidden ) ){

                    shortcode.is_customize = true;
                    delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        customizeToHidden : function( rowElement , themeId , elementId ){

        },

        publicToHidden : function( rowElement , themeId , elementId ){
            var self= this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    shortcode.is_hidden = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },

        //refresh orders in subthemes row and current page row
        ordersRefresh : function(){
            var self = this ,
                themeRows = {};

            $( ".site-main > .sed-row-pb" ).each( function( index , el ){
                if( $(this).data("themeId") ){
                    var id = $(this).attr("id");
                    themeRows[$(this).data("themeId")] = {
                        elId :  id,
                        order : index
                    };
                }
            });

            if( !_.isEmpty( themeRows ) ){

                $.each( this.subThemes , function( subTheme , rows ){
                    self.subThemes[subTheme] = _.map( self.subThemes[subTheme] , function( options ){
                        if( $.inArray( options.theme_id , _.keys( themeRows ) ) != -1 ){
                            self.pageThemeRowsOrders[options.theme_id] = themeRows[options.theme_id].order;

                            //$( '.menu_item_label[data-element-id="'+ themeRows[options.theme_id].elId +'"]' ).find(".sed-order-sub-theme").val( themeRows[options.theme_id].order );

                            var elCOrders = $("#" + themeRows[options.theme_id].elId).data("customOrders"),
                                customOrder = ( !_.isUndefined( elCOrders ) && !_.isUndefined( elCOrders[subTheme] ) ) ? elCOrders[subTheme] : "";

                            if( _.isEmpty( $.trim( customOrder ) ) ){
                                options.order = themeRows[options.theme_id].order;
                            }
                        }

                        return options;
                    });
                });
            }

        },

        /*
         theme id start from 1 ---- theme_id_1 , theme_id_2 , theme_id_3 , ...
         */
        generateThemeId : function( ){

            this.lastThemeId += 1;

            api.preview.send( 'sed_last_theme_id' , this.lastThemeId);

            return "theme_id_" + this.lastThemeId;

        },

    });


    $( function() {

        api.currentMainContentModule    = window._sedAppMainContentModule;
        api.defaultSubTheme             = window._sedAppDefaultSubTheme;

        api.sedSubThemes = window._sedAppEditorSubThemes;
        api.appSubThemes = new api.AppSubThemes({});

    });

}(sedApp, jQuery));