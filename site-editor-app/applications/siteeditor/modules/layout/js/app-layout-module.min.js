(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppLayouts = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            api.preview.bind( 'active', function() {
                self.initThemeRows();
            });

            this.ready();
        },

        initThemeRows : function(){
            var layoutModels = api('sed_layouts_models')(),
                self = this;

            this.currentLayout = !_.isEmpty(api('page_layout')()) ? api('page_layout')() : api.defaultPageLayout;

            _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( !_.isUndefined( shortcode.theme_id )  ){
                    var rowElement = $('[sed_model_id="' + shortcode.id + '"]');

                    rowElement.data( "themeId" , shortcode.theme_id );

                    _.each(layoutModels[self.currentLayout], function (layoutModel) {
                        if (layoutModel.theme_id == shortcode.theme_id) {

                            if( !_.isUndefined( shortcode.is_customize ) ) {
                                rowElement.data("staticThemeOrder", layoutModel.order);
                            }else{
                                rowElement.data("themeOrder", layoutModel.order);
                            }

                            return false;
                        }
                    });

                    if( !_.isUndefined( shortcode.is_hidden ) && shortcode.is_hidden === true ){
                        rowElement.addClass("sed-hidden-theme-row");
                    }else if( !_.isUndefined( shortcode.is_customize ) && shortcode.is_customize === true ){
                        rowElement.data( "isCustomize" , "yes" );
                    }

                }
            });

        },


        ready : function(){
            var self = this ,
                postId = $(".site-main").data("postId");

            this.postId = postId;

            api.preview.bind( "sedLayoutChangeScope" , function( obj ){
                var type = obj.type ,
                    elementId = obj.elementId ,
                    themeId = obj.themeId ;

                var rowElement = $('[sed_model_id="' + elementId + '"]').parents(".sed-pb-module-container:first").parent();

                switch( type ){
                    case "privateToPublic" :
                        self.privateToPublic( rowElement , themeId , elementId );
                    break;
                    case "publicToPrivate" :
                        self.publicToPrivate( rowElement , themeId , elementId );
                    break;
                    case "customizeToPublic" :
                        self.customizeToPublic( rowElement , themeId , elementId , obj.usingDataMode );
                    break;
                    case "hiddenToPublic" :
                        self.hiddenToPublic( rowElement , themeId , elementId );
                    break;
                    case "publicToCustomize" :
                        self.publicToCustomize( rowElement , themeId , elementId );
                    break;
                    case "hiddenToCustomize" :
                        self.hiddenToCustomize( rowElement , themeId , elementId );
                    break;
                    case "customizeToHidden" :
                        self.customizeToHidden( rowElement , themeId , elementId , obj.usingDataMode );
                    break;
                    case "publicToHidden" :
                        self.publicToHidden( rowElement , themeId , elementId );
                    break;
                }

            });

            api.preview.bind( 'active', function() {

                api.preview.send( "sedPagesLayoutsInfo" , {
                    defaultPageLayout    : api.defaultPageLayout ,
                    currentLayoutGroup   : api.currentLayoutGroup
                });

            });

            /*api.preview.bind( "sedSave", function() {
                self.initDataThemeId();
            });*/

            api.Events.bind( "afterCreateModule" , function( moduleWrapper , moduleName ){
                if( moduleWrapper.parent().hasClass("site-main") ){
                    self.setBeforeThemeId( moduleWrapper );
                }
            });

            api.Events.bind( "sedAfterDuplicate" , function( elementId , newElement ){

                if( newElement.parent().hasClass("site-main") ){
                    self.setBeforeThemeId( newElement );

                    if( !_.isUndefined( $( '[sed_model_id="' + elementId + '"]').data("themeId") ) ) {
                        api.contentBuilder.pagesThemeContent[self.postId] = _.map(api.contentBuilder.pagesThemeContent[self.postId], function (shortcode) {
                            if( shortcode.id == newElement.attr("sed_model_id") ) {
                                delete shortcode.theme_id;

                                if (!_.isUndefined(shortcode.is_customize))
                                    delete shortcode.is_customize;

                                if (!_.isUndefined(shortcode.is_hidden))
                                    delete shortcode.is_hidden;

                                return shortcode;
                            } else
                                return shortcode;
                        });

                        api.contentBuilder.sendData("theme");
                    }
                }

            });

            this.removeThemeRow();

            this.sortThemeRow();

        },


        sortThemeRow : function(){

            var startInRoot, stopInRoot, self = this;

            api.preview.bind("sedDestroyThemeRowWithSortResult" , function( type ){
                self.destroyThemeRowWithSort( type );
            });

            api.Events.bind( "moduleSortableStartEvent" , function( ui ){
                var item = ui.item;
                if( item.parent().hasClass("site-main") )
                    startInRoot = true;
                else
                    startInRoot = false;
            });

            api.addFilter('modulesSortableFilters', function ( result , ui , sender , currentSortArea , sortAreaStart , contentModel ) {

                if( !_.isUndefined( self.sortThemeId ) && !_.isUndefined( self.sortRowEl ) ) {
                    self.sortShortcodeUpdateArgs = [ui , sender , currentSortArea , contentModel];
                    return {
                        sort: true,
                        domUpdate: false
                    };

                }else{

                    return {
                        sort: true,
                        domUpdate: result.domUpdate
                    };

                }

            }, 10);

            api.Events.bind( "moduleBeforeSortableStopEvent" , function( ui , sortElement ){
                var item = ui.item ;
                if( item.parent().hasClass("site-main") )
                    stopInRoot = true;
                else
                    stopInRoot = false;

                if( startInRoot === true && stopInRoot === false ) {
                    var themeId = false;

                    if (item.data("themeId"))
                        themeId = item.data("themeId");

                    if (themeId !== false) {
                        self.sortThemeId = themeId;
                        self.sortRowEl = item;
                        self.sortElement = sortElement;

                        api.preview.send( "sedDestroyThemeRowWithSort" );
                    }
                }
            });

            api.Events.bind( "moduleSortableStopEvent" , function( ui , sortElement ){
                var item = ui.item ;
                if( item.parent().hasClass("site-main") )
                    stopInRoot = true;
                else
                    stopInRoot = false;


                if( startInRoot === true && stopInRoot === true ){

                    self.ordersRefresh();

                    api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                        if( !_.isUndefined( shortcode.before_theme_id ) ){
                            var themeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                            shortcode.before_theme_id = themeId;
                            return shortcode;
                        }else
                            return shortcode;
                    });

                    api.contentBuilder.sendData( "theme" );

                }else if( startInRoot === true && stopInRoot === false ){
                    var themeId = false;

                    if( item.data("themeId") )
                        themeId = item.data("themeId");

                    if( themeId === false ){

                        self.ordersRefresh();

                        api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                            if( !_.isUndefined( shortcode.before_theme_id ) && item.attr("sed_model_id") == shortcode.id ){

                                delete shortcode.before_theme_id;
                                return shortcode;

                            }else
                                return shortcode;
                        });

                        api.contentBuilder.sendData( "theme" );

                    }

                }else if( startInRoot === false && stopInRoot === true ){

                    api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                        if( item.attr("sed_model_id") == shortcode.id ){

                            var newThemeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                            shortcode.before_theme_id = newThemeId;

                            return shortcode;

                        }else
                            return shortcode;
                    });

                    api.contentBuilder.sendData( "theme" );

                }
            });

        },


        destroyThemeRowWithSort : function( type ){
            var self = this;

            var themeId = self.sortThemeId,
                rowEl = self.sortRowEl;

            if( type == "cancel" ){
                self.sortElement.sortable( "cancel" );
            }else if( type == "ok" ) {
                api.contentBuilder.updateModulesOrder.apply( api.contentBuilder , self.sortShortcodeUpdateArgs );

                self.removeRowFromLayouts(themeId);

                self.publicToPrivate( rowEl, themeId );

                api.contentBuilder.pagesThemeContent[self.postId] = _.map(api.contentBuilder.pagesThemeContent[self.postId], function (shortcode) {
                    if (!_.isUndefined(shortcode.before_theme_id) && shortcode.before_theme_id == themeId) {
                        var newThemeId = self.getNextClosestThemeRowId($('[sed_model_id="' + shortcode.id + '"]'));
                        shortcode.before_theme_id = newThemeId;
                        return shortcode;
                    } else
                        return shortcode;
                });

                api.contentBuilder.sendData("theme");
            }

            delete self.sortThemeId;
            delete self.sortRowEl;
            delete self.sortElement;
            delete self.sortShortcodeUpdateArgs;

        },


        removeThemeRow : function(){
            var self = this;

            var isRemoveRow = false ,
                removedThemeId = false;

            api.Events.bind( "sedBeforeRemove" , function( elementId ){

                if( $("#" + elementId).parent().hasClass("site-main") ){
                    isRemoveRow = true;

                    if( $("#" + elementId).data("themeId") ){
                        removedThemeId = $("#" + elementId).data("themeId");
                    }

                }

            });

            api.Events.bind( "sedAfterRemove" , function( elementId ){

                if( isRemoveRow === true ){
                    isRemoveRow = false;

                    if( removedThemeId !== false ){

                        self.removeRowFromLayouts( removedThemeId );
                        self.ordersRefresh();

                        api.contentBuilder.pagesThemeContent[self.postId] = _.map( api.contentBuilder.pagesThemeContent[self.postId], function(shortcode){
                            if( !_.isUndefined( shortcode.before_theme_id ) && shortcode.before_theme_id == removedThemeId ){
                                var themeId = self.getNextClosestThemeRowId( $('[sed_model_id="' + shortcode.id + '"]') );
                                shortcode.before_theme_id = themeId;
                                return shortcode;
                            }else
                                return shortcode;
                        });

                        api.contentBuilder.sendData( "theme" );

                        removedThemeId = false;
                    }

                }
            });

        },


        removeRowFromLayouts : function( themeId ){
            api.preview.send( "sedRemoveRowFromLayouts" , themeId );

            //remove from sed theme shortcodes content

        },


        privateToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "themeId" , themeId );
            this.ordersRefresh();

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    rowShortcode = shortcode;

                    if( !_.isUndefined( shortcode.before_theme_id ) )
                        delete shortcode.before_theme_id;

                    shortcode.theme_id = themeId;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        publicToPrivate : function( rowElement , themeId ){
            var self= this;

            rowElement.removeData( "themeId" );
            rowElement.removeData( "staticThemeOrder" );
            rowElement.removeData( "themeOrder" );
            rowElement.removeData( "isCustomize" );
            rowElement.removeClass("sed-hidden-theme-row");

            this.ordersRefresh();

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    delete shortcode.theme_id;

                    if( !_.isUndefined( shortcode.is_customize ) )
                        delete shortcode.is_customize;

                    if( !_.isUndefined( shortcode.is_hidden ) )
                        delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        customizeToPublic : function( rowElement , themeId , elementId , usingDataMode ){

            if( usingDataMode == "using_public_data" ){
                this.revertCustomizeToPublic( rowElement , themeId );

            }else if( usingDataMode == "using_customize_data" ){
                var rowId = rowElement.attr("sed_model_id");

                api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                    if( shortcode.id == rowId && !_.isUndefined( shortcode.is_customize ) ){
                        delete shortcode.is_customize;
                        return shortcode;
                    }else
                        return shortcode;
                });

                this.ordersRefresh();
                api.contentBuilder.sendData( "theme" );
            }

        },


        revertCustomizeToPublic : function( rowElement , themeId , hide ){

            var rowId = rowElement.attr("sed_model_id"),
                layoutsContent = api('sed_layouts_content')(),
                rowContent = _.map( layoutsContent[themeId] , _.clone ),
                rowIdx = api.contentBuilder.getShortcodeIndex( rowId ),
                staticOrder = parseInt( $( '[sed_model_id="' + rowId + '"]').data( "staticThemeOrder" ) );

            hide = !_.isUndefined( hide ) ? hide : false;

            //remove customize module data
            api.contentBuilder.deleteModule( rowId , this.postId);

            if( hide === true ){
                rowContent[0].is_hidden = true;
            }
            //insert pulic data instade customize data
            var index = rowContent.length + rowIdx;
            api.contentBuilder.addShortcodesToParent( rowContent[0].id , rowContent , this.postId , index );

            //do shortcode pulic data for ui
            api.doShortcodeMode = "normal";
            var html = api.contentBuilder.do_shortcode( "sed_row" , rowContent[0].id , rowContent[0].id );

            //replace public ui with customize ui & revert to public order & force select public module
            $( '[sed_model_id="' + rowId + '"]').remove();

            if( staticOrder == 0 ){
                $( html).prependTo( $(".site-main") );
            }else if( staticOrder > 0 ){
                var nextOrder = staticOrder + 1,
                    nextEl = false;

                $( ".site-main > .sed-row-pb" ).each( function( index , el ){
                    if( !_.isUndefined(  $(this).data("themeOrder") ) && $(this).data("themeOrder") == nextOrder ){
                        nextEl = $(this);
                        return false;
                    }
                });

                if( nextEl === false ) {
                    $(html).appendTo( $(".site-main") );
                }else{
                    $(html).insertBefore( nextEl );
                }
            }

            $( '[sed_model_id="' + rowId + '"]').data( "themeId" , themeId );
            $( '[sed_model_id="' + rowId + '"]').data( "themeOrder" , staticOrder );

            if( hide === true ){
                $( '[sed_model_id="' + rowId + '"]').addClass("sed-hidden-theme-row");
            }

            api.selectPlugin.select( $( '[sed_model_id="' + rowContent[2].id + '"]' ) , true );

        },


        hiddenToPublic : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.removeClass("sed-hidden-theme-row");

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.is_hidden ) ){
                    delete shortcode.is_hidden;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        publicToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) ){
                    shortcode.is_customize = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        hiddenToCustomize : function( rowElement , themeId , elementId ){
            var self= this;

            rowElement.data( "isCustomize" , "yes" );
            rowElement.data( "staticThemeOrder" , rowElement.data( "themeOrder" ) );
            rowElement.removeData( "themeOrder" );
            rowElement.removeClass("sed-hidden-theme-row");

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") && !_.isUndefined( shortcode.theme_id ) && !_.isUndefined( shortcode.is_hidden ) ){

                    shortcode.is_customize = true;
                    delete shortcode.is_hidden;

                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },


        customizeToHidden : function( rowElement , themeId , elementId , usingDataMode ){

            if( usingDataMode == "using_public_data" ){

                this.revertCustomizeToPublic( rowElement , themeId , true );

            }else if( usingDataMode == "using_customize_data" ){
                var rowId = rowElement.attr("sed_model_id");
                rowElement.addClass("sed-hidden-theme-row");

                api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                    if( shortcode.id == rowId && !_.isUndefined( shortcode.is_customize ) ){
                        delete shortcode.is_customize;
                        shortcode.is_hidden = true;
                        return shortcode;
                    }else
                        return shortcode;
                });

                this.ordersRefresh();
                api.contentBuilder.sendData( "theme" );
            }

        },


        publicToHidden : function( rowElement , themeId , elementId ){
            var self= this;
            rowElement.addClass("sed-hidden-theme-row");

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == rowElement.attr("sed_model_id") ){
                    shortcode.is_hidden = true;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );
        },

        //refresh orders in subthemes row and current page row
        ordersRefresh : function(){
            var self = this ,
                themeRows = {},
                staticThemeOrder = {};

            $( ".site-main > .sed-row-pb" ).each( function( index , el ){
                if( !_.isUndefined(  $(this).data("staticThemeOrder") ) ){

                    staticThemeOrder[$(this).data("themeId")] = $(this).data("staticThemeOrder");
                }
            });

            var order = 0;
            $( ".site-main > .sed-row-pb" ).each( function( index , el ){

                if( !_.isUndefined( $(this).data("themeId") ) ){
                    var themeId = $(this).data("themeId");

                    if( $.inArray( themeId , _.keys( staticThemeOrder ) ) > -1 ){

                        themeRows[themeId] = {
                            order: staticThemeOrder[themeId]
                        };

                    }else {

                        if( $.inArray( order , _.values( staticThemeOrder ) ) > -1 ){
                            order++;
                        }

                        $(this).data("themeOrder" , order );

                        themeRows[themeId] = {
                            order: order
                        };

                        order++;
                    }

                }

            });

            api.preview.send( "updateCurrentLayoutRowsOrders" , themeRows );
        },


        setBeforeThemeId : function( element ){
            var self = this;

            api.contentBuilder.pagesThemeContent[this.postId] = _.map( api.contentBuilder.pagesThemeContent[this.postId], function(shortcode){
                if( shortcode.id == element.attr("sed_model_id") ){
                    var themeId = self.getNextClosestThemeRowId( element );
                    shortcode.before_theme_id = themeId;
                    return shortcode;
                }else
                    return shortcode;
            });

            api.contentBuilder.sendData( "theme" );

        },


        getNextClosestThemeRowId : function(element){

            if( !element.parent().hasClass("site-main") ){
                alert("this element is not a theme row");
                return false;
            }

            themeId = "";

            element.nextAll(".sed-row-pb").each( function( index , rowEl ){
                if( !_.isUndefined(  $(this).data("themeId") ) ){
                    themeId = $(this).data("themeId");
                    return false;
                }
            });

            return themeId;
        }

    });


    $( function() {

        api.defaultPageLayout   = window._sedAppDefaultPageLayout;
        api.currentLayoutGroup   = window._sedAppCurrentLayoutGroup;

        api.appLayouts = new api.AppLayouts({});

    });

}(sedApp, jQuery));