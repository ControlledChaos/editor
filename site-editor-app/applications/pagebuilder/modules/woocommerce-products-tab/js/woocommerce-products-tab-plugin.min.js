/**
 * image-plugin.min.js
 *
 *
 * License: http://www.siteeditor.org/license
 * Contributing: http://www.siteeditor.org/contributing
 */

/*global siteEditor:true */
siteEditor.PluginManager.add('woocommerce-products-tab', function(siteEditor) {
    var api = siteEditor.sedAppClass.editor , $ = siteEditor.dom.Sizzle;

    var $initCats = false;
    $("#sed_pb_sed_products_tab_tab_items_settings_panel").livequery(function(){
        $(this).click(function(){
            if( $initCats === false ){
                var request = $.ajax({
                    type: "POST",
                    url: SEDAJAX.url,
                    data:
                    {
                        action        : 'product_sub_categories',
                        nonce         :  api.addOnSettings.wooProductsTab.nonce.cat ,
                        sed_page_ajax :  'product_categories_loader'
                    },
                    beforeSend: function()
                    {
                        $('.icon-library-loading' , '#site-editor-icon-library').show();
                    },
                    /*error: function()
                    {
                    alert('Couldn\'t add the font because the server didn’t respond.<br/>Please reload the page, then try again');
                    },*/
                });

                request.done(function(response)
                {
                    $('.icon-library-loading' , '#site-editor-icon-library').hide();

                    if( response.success === true){

                        var subCats = response.data;
                        $.each( subCats , function( termId , option ){
                            termId = termId.replace( "term_" , "" );
                            if( option.parent_id != 0 ){

                                var element = $('<option value="'+termId+'" data-parent-id="'+option.parent_id+'" data-top-parent-id="'+option.top_parent_id+'">'+option.name+'</option>').appendTo( $("#sed_pb_sed_products_tab_tab_items") );
                                if( $("#sed_pb_sed_products_tab_category").val() ==  option.top_parent_id ){
                                    element.show();
                                }else{
                                    element.hide();
                                }
                            }else{
                                var element = $('<option value="'+termId+'">'+option.name+'</option>').appendTo( $("#sed_pb_sed_products_tab_category") );
                            }
                            $("#sed_pb_sed_products_tab_tab_items").trigger("chosen:updated");
                        });

                        var cControl = api.control.instance( "sed_products_tab_category" );

                        cControl.update( cControl.currentValue );
                        
                        var spControl = api.control.instance( "sed_products_tab_tab_items" );
                        //console.log("vazehhhhhhhhhhhhhhhhhhhh" , spControl );
                        spControl.update( spControl.currentValue );


                    }

                });
                $initCats = true;
            }
        });
    });

    $("#sed_pb_sed_products_tab_category").livequery(function(){
        $(this).on("change",function(){
            var val = $(this).val();



            $("#sed_pb_sed_products_tab_tab_items > option").each(function(){
                if( !$(this).data("topParentId") || $(this).data("topParentId") == val ){
                    $(this).show();
                }else{
                    $(this).hide();
                }
            });

            var spControl = api.control.instance( "sed_products_tab_tab_items" );

            spControl.refresh( "" );
            spControl.update( "" );
            //$("#sed_pb_sed_products_tab_tab_items").val("");
            //$("#sed_pb_sed_products_tab_tab_items").trigger("chosen:updated");

        });
    });

    /*$("#sed_pb_sed_products_tab_tab_items").livequery(function(){
    });*/




    api.wooTabOrderControl = api.ModuleControl.extend({

        _ready: function() {

			var control = this ,
				sortableBox = this.container.find('.sed-woo-tab-sortable'),
                chosen = this.container.find('.sed-order-chosen');

            this.sortableBox = sortableBox;
            this.chosenBox = chosen;

            this.chosenBox.chosen({
                disable_search_threshold: 5,
                no_results_text: "Oops, nothing found!",
                allow_single_deselect: true,
                placeholder_text_multiple: "Select Some Options",
                placeholder_text_single: "Select an Option",
                width: "95%"
            }).change(function(){

                var self = $(this),
                    currVal = $(this).val();
                $.each( currVal , function( i , value){
                    if( control.sortableBox.find('li[data-tab-value="'+value+'"]').length == 0 ){
                        var $text = self.find('[value="'+value+'"]').text();
                        $('<li class="ui-state-default" data-tab-value="'+value+'"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>'+$text+'</li>').appendTo( $("#sed_products_tab_tab_items_order_sortable") );
                    }
                });

                currVal = $.map( currVal, function( ord, i ) {
                  return ( ord + "_term" );
                });

                control.sortableBox.find(">li").each(function(){
                    var val = $(this).data("tabValue") + "_term";
                    if( $.inArray( val , currVal ) == -1 ){
                        $(this).remove();
                    }
                });

                var orders = [];
                control.sortableBox.find(">li").each(function(){
                    var val = $(this).data("tabValue");
                    orders.push( val );
                });

                var orders_str = orders.join(",");

                control.refresh( orders_str );
            });

            this.sortableBox.sortable({
                update : function( e , ui){
                    var orders = [];
                    control.sortableBox.find(">li").each(function(){
                        var val = $(this).data("tabValue");
                        orders.push( val );
                    });

                    var orders_str = orders.join(",");
                    control.refresh( orders_str );
                }
            }).disableSelection();

        },

        _update: function( val ){

            if( $initCats === false )
                return ;

            var control = this;
            val = ( !val ) ? "" : val;
            var orders = val.split(",");

            //$("#sed_pb_sed_products_tab_tab_items > option").show();

            $.each( orders , function( i , order ){

                var $element = control.sortableBox.find('li[data-tab-value="'+order+'"]');

                if( $element.length == 0 ){
                    var $text = $("#sed_pb_sed_products_tab_tab_items").find('[value="'+order+'"]').text();
                    $element = $('<li class="ui-state-default" data-tab-value="'+order+'"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>'+$text+'</li>');
                }

                if( control.sortableBox.find('li').length > 0 ){
                    if( i > 0 )
                        $element.insertAfter( control.sortableBox.find('li').eq(i-1) );
                    else
                        $element.insertBefore( control.sortableBox.find('li').eq(0) );
                }else{
                    $element.appendTo( control.sortableBox );
                }
            });

            var newOrders = $.map( orders, function( ord, i ) {
              return ( ord + "_term" );
            });

            control.sortableBox.find(">li").each(function(){
                var nval = $(this).data("tabValue") + "_term";
                if( $.inArray( nval , newOrders ) == -1 ){
                    $(this).remove();
                }
            });

            var cat= $("#sed_pb_sed_products_tab_category").val();
            $("#sed_pb_sed_products_tab_tab_items > option").each(function(){
                if( !$(this).data("topParentId") || $(this).data("topParentId") == cat ){
                    $(this).show();
                }else{
                    $(this).hide();
                }
            });

            $("#sed_pb_sed_products_tab_tab_items").val(orders);

            $("#sed_pb_sed_products_tab_tab_items").trigger("chosen:updated");
        }

    });


    api.controlConstructor = $.extend( api.controlConstructor, {
        woo_tab_order : api.wooTabOrderControl
    });

    /*api.currentHoverEffectModel = api.currentHoverEffectModel || {};

    api.HoverEffect = api.ModuleControl.extend({

        _ready: function() {

			var control = this ,
                dialog = $("#dialog_page_box_" + this.shortcode + "_" + this.attr );

            this.dialog = dialog;



            dialog.find(".hover-effect-dialog-inner").html( $("#tmpl-dialog-image-hover-effect").html() );

            dialog.find( ".group-hover-effect" ).accordion({
                active: 0,
                collapsible: true,
                event: 'click',
                heightStyle: 'content',
            });

            api.Events.bind( "after_apply_settings_relations_update" , function( shortcode ){
                if(shortcode == control.shortcode){
                    var num = dialog.find( ".group-hover-effect > .ui-accordion-header:visible:first" ).index();
                    dialog.find( ".group-hover-effect" ).accordion("option" , "active" , num/2);
                }
            });

            api.Events.bind( "after_apply_settings_relations_refresh" , function( shortcode , attr ){
                if(shortcode == control.shortcode && !_.isUndefined( control.params.relation_attrs ) && $.inArray( attr , control.params.relation_attrs ) > -1 ){
                    var num = dialog.find( ".group-hover-effect > .ui-accordion-header:visible:first" ).index();
                    dialog.find( ".group-hover-effect" ).accordion("option" , "active" , num/2);
                }
            });

            this._hoverEffectSupport();

            this.container.find(".sed-hover-effect-btn").on("click" , function(){
                yepnope({
                    load: SEDEXTBASE.url + "hover-effect/css/ihover.min.css",
                    callback: function (url, result, key) {

                    }
                });

            });

            dialog.find('.remove-current-hover-effect').click(function(){
                control.refresh( "" );
                dialog.find(".hover-effect-item").removeClass("hover-effect-item-selected");
            });

            dialog.find('.hover-effect-item').click(function(){
                var value = $(this).data("value");

                control.refresh( value );
                dialog.find(".hover-effect-item").removeClass("hover-effect-item-selected");
                $(this).addClass("hover-effect-item-selected");
            });

        },

        _hoverEffectSupport : function( ){
            if( _.isUndefined( this.params.support ) )
                return ;

            var self = this,
                hoverEffects = this.params.support ,
                type = ( !_.isUndefined( hoverEffects.type ) ) ? hoverEffects.type.toLowerCase() : "include";

            if( !$.isArray(hoverEffects.fields) || hoverEffects.fields.length == 0 )
                return ;

            if( type == "include" )
                this.dialog.find(".hover-effect-item").hide();

            _.each( hoverEffects.fields , function( field ){

                var hoverEffectEl = self.dialog.find("[data-value='" + field + "']");

                if( hoverEffectEl.length > 0 && type == "include"  )
                    hoverEffectEl.css("display" , "inline-block");
                else if( hoverEffectEl.length > 0 && type == "exclude"  )
                    hoverEffectEl.hide();
            });


            this.dialog.find(".group-hover-effect > div").each(function(){
                $(this).show();
                var numV = $(this).find(".hover-effect-item:visible").length;

                if(numV == 0){
                    $(this).prev().hide();
                    $(this).hide();
                }else{
                    $(this).prev().show();
                    $(this).hide();
                }
            });

        },

        _update: function( val ){

            this.dialog.find(".hover-effect-item").removeClass("hover-effect-item-selected");
            this.dialog.find(".hover-effect-item[data-value='" + val + "']").addClass("hover-effect-item-selected");

        }

    });

    api.createRelations.hover_effect = function( value , type , id , shortcode , attr , selectedControl ){
        type = (!type) ? "hide" : type;
        var element = $( "#dialog_page_box_" + shortcode + "_" + attr );
        //alert(element.find("[data-value]").length);
        if(type == "hide"){
            element.find("[data-value='" + value + "']").hide();
        }else
            element.find("[data-value='" + value + "']").css("display" , "inline-block");

        var cEl = element.find("[data-value='" + value + "']").parent();
        cEl.show();
        var cElVCh = cEl.find(">div:visible");

        if(cElVCh.length > 0){
            cEl.hide();
            cEl.prev().show();
        }else{
            cEl.hide();
            cEl.prev().hide();
        }

        //$(".hover-effect-dialog-inner > .group-hover-effect").accordion("option" , "active" , 20);
    };

    api.controlConstructor = $.extend( api.controlConstructor, {
        hover_effect : api.HoverEffect
    });

    $( function() {


    }); */

});