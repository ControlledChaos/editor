(function( exports, $ ) {
    var api = sedApp.editor;

    $( function() {

        $('.code-syntax-highlighter-editor').livequery(function(){
            $(this).on("click" , function(){
                var textarea = $(this).parents(".module-code-syntax-highlighter:first").find(">.code-syntax-highlighter-textarea"),
                    closeBtn = $(this).parents(".module-code-syntax-highlighter:first").find(">.close-code-editor");

                closeBtn.show();
                textarea.show();

                textarea.css({
                    "height" : $(this).height() + "px" ,
                    "width"  : $(this).width() + "px" ,
                });

                textarea.focus();

                $(this).hide();
            });
        });

        $('.module.module-code-syntax-highlighter > .close-code-editor').livequery(function(){
            $(this).on("click" , function(){
                var module = $(this).parents(".module-code-syntax-highlighter:first"),
                    textarea = module.find(">.code-syntax-highlighter-textarea"),
                    highlighter = module.find(".code-syntax-highlighter-editor");

                textarea.hide();
                $(this).hide();

                highlighter.show();
                api.contentBuilder.refreshModule( module.attr("id") );

            });
        });

        $('.code-syntax-highlighter-textarea').livequery(function(){
            $(this).on("change" , function(){
                var content = $(this).val(),
                    _moduleId = $(this).parent().attr("id");

                var postId = api.pageBuilder.getPostId( $("#" + _moduleId) ),
                    children = api.contentBuilder.getShortcodeChildren( _moduleId );

                if(children.length != 1){
                    alert("In Text Editor content not Allowed using any shortcodes");
                    return ;
                }

                var contentModel = children[0];

                if(contentModel.tag != "content"){
                    alert("your shortcode incorrect , shortcode not AS content model");
                    return ;
                }

                contentModel.content = content;
                api.contentBuilder.updateShortcode( contentModel );
            });
        });

        api.shortcodeCreate.sed_code_syntax_highlighter = function( id , param ){

            var shortcode = api.contentBuilder.getShortcode( id ) ,
                lang = ( param.context.lang ) ? param.context.lang.toLowerCase() : "php",
                $params = [];

    		$params.push( "brush: " + lang + ";" );

            // Parameter renaming (the shortcode API doesn't like parameter names with dashes)
            var $rename_map = {
                'autolinks'      : 'auto-links',
                'classname'      : 'class-name',
                'firstline'      : 'first-line',
                'fontsize'       : 'font-size',
                'htmlscript'     : 'html-script',
                'padlinenumbers' : 'pad-line-numbers',
                'smarttabs'      : 'smart-tabs',
                'tabsize'        : 'tab-size',
                //'wraplines'      : 'wrap-lines',
            };


            // Allowed configuration parameters and their type
            // Use the proper names (see above)
            var $allowed_atts = {
                'auto-links'       : 'boolean',
                'class-name'       : 'other',
                'collapse'         : 'boolean',
                'first-line'       : 'integer',
                'font-size'        : 'integer',
                'gutter'           : 'boolean',
                'highlight'        : 'other',
                'html-script'      : 'boolean',
                'light'            : 'boolean',
                'pad-line-numbers' : 'other',
                'smart-tabs'       : 'boolean',
                'tab-size'         : 'integer',
                'title'            : 'other',
                'toolbar'          : 'boolean',
                //'wrap-lines'       : 'boolean',
            };

            var $title = '';

            $.each( param.context , function( $key , $value ){
                $key = $key.toLowerCase();

                if( !_.isUndefined( $rename_map[$key] ) )
                    $key = $rename_map[$key];


                if( _.isUndefined( $allowed_atts[$key] ) || _.isNull( $allowed_atts[$key] ) )
                    return true;

                if( _.isBoolean($value) && $value === true){
                    $value = "true";
                }else if(_.isBoolean($value) && $value === false){
                    $value = "false";
                }

                if( $allowed_atts[$key] == 'integer' ){
                    $value = parseInt( $value );
                }

                // Sanitize the "classname" parameter
                /*if ( 'class-name' == $key )
                  $value = trim( preg_replace( '/[^a-zA-Z0-9 _-]/i', '', $value ) );*/

                // Special sanitization for "pad-line-numbers"
                if ( $key == 'pad-line-numbers' ) {
                    if ( -1 == $value )
                      $value = 'true';
                    else if ( 0 == $value )
                      $value = 'false';
                    else
                      $value = parseInt( $value );
                }

                // Add % sign to "font-size"
                if ( $key == 'font-size' )
                  $value = $value + '%';

                // If "html-script", then include the XML brush as it's needed
                /*if ( $key == 'html-script' && $value == 'true' )
                    $usedbrushes.xml = true;*/


                // Sanitize row highlights
                if ( $key == 'highlight' ) {
                    if ( _.isNumber( $value ) || ( _.isString( $value ) && $value.indexOf( ',' ) == -1 && $value.indexOf( '-' ) == -1 ) ) {
                    	  $value = parseInt( $value );
                          if( isNaN( $value ) ){
                              return true;
                          }
                    } else {

                        if ( !_.isString( $value ) )
                        	return true;

                        var $lines = $value.split( ',' ),
                            $highlights = [];

                        _.each( $lines , function( $line ) {
                            // Line range
                            if ( $line.indexOf( '-' ) != -1 ) {
                                var new_lines = _.map( $line.split( "-" ) , function( ln ){
                                    return parseInt( ln );
                                });

                                if( new_lines.length == 2 ){
                                    var $range_start = parseInt( new_lines[0] ),
                                        $range_end = parseInt( new_lines[1] );
                                }else
                                    return;

                                if ( ! $range_start || ! $range_end || $range_start < 1 || $range_end < 2 || $range_end <= $range_start )
                                    return;

                                for (var $i = $range_start; $i <= $range_end; $i++)  {
                                    $highlights.push( $i );
                                }

                            } else {
                                $line = parseInt( $line );

                                if( isNaN( $line ) )
                                    return;

                                $highlights.push( $line );
                            }
                        });

                        _.sortBy( $highlights );

                        $value = $highlights.join( ',' );
                    }

                    if ( _.isNull( $value ) || !$value )
                    	return true;

                    // Wrap highlight in [ ]
                    $params.push( $key + ":[" + $value + "];" );
                    return true;
                }


                // Don't allow HTML in the title parameter
                /*if ( $key == 'title' ) {
                    $value = strip_tags( html_entity_decode( strip_tags( $value ) ) );
                }*/

                $params.push( $key + ":" + $value + ";" );

                // Set the title variable if the title parameter is set (but not for feeds)
                if ( $key == 'title' ){
                    $title = ' title="' + $value + '"';
                }

            });

            $params.push( 'notranslate' ); // For Google, see http://otto42.com/9k

            param.context.code_params = $params.join( ' ' );
            param.context.title = $title;

            var $theme =  ( param.context.theme ) ? param.context.theme : "default" ;

            if( $theme != "none" ){
                var styles = [];
                styles.push([ 'syntaxhighlighter-theme-' + $theme , SED_PB_MODULES_URL + 'code-syntax-highlighter/css/shTheme' + api.fn.ucfirst( $theme ) + '.css' , ['syntaxhighlighter-core']  , "1.0.0" , "all" ]);
                api.pageBuilder.moduleStylesLoad( styles );
            }


            return param;
        };

        api.shortcodeUpdate.sed_code_syntax_highlighter = {

            /*lang : function( id , value ){
                var lang = ( value ) ? value.toLowerCase() : "php" ,
                    $usedbrushes = {};

                if( lang ){
                    $usedbrushes[lang] = true;
                }

                var shortcode = api.contentBuilder.getShortcode( id ),
                    attrs = shortcode.attrs;

                if ( _.isUndefined( attrs.htmlscript ) || attrs.htmlscript === true ){
                    $usedbrushes.xml = false;
                }

                if( !_.isEmpty( $usedbrushes ) ){
                    var scripts = [];

                    $.each( $usedbrushes , function( $lang , $val ){
                        scripts.push([ 'syntaxhighlighter-brush-' + $lang , SED_PB_MODULES_URL + 'code-syntax-highlighter/js/shBrush' + api.fn.ucfirst( $lang ) + '.js' , []  , "1.0.0" , true ]);
                    });

                    var _callback = function(){
                        api.contentBuilder.refreshModule( id );
                    };

                    api.pageBuilder.moduleScriptsLoad( scripts , _callback );
                }

            } */

        };

        /*$('.code-syntax-highlighter-editor').livequery(function(){
        	$(this).contentEditable().change(function(e){
        		// what to do when the data has changed
                var content = e.changed.content,
                    _moduleId = $(this).parent().attr("id");
                    console.log("contentEditable()" , e);

                var postId = api.pageBuilder.getPostId( $("#" + _moduleId) ),
                    children = api.contentBuilder.getShortcodeChildren( _moduleId );

                if(children.length != 1){
                    alert("In Text Editor content not Allowed using any shortcodes");
                    return ;
                }

                var contentModel = children[0];

                if(contentModel.tag != "content"){
                    alert("your shortcode incorrect , shortcode not AS content model");
                    return ;
                }

                contentModel.content = content;
                api.contentBuilder.updateShortcode( contentModel );

        	});
        });

        var fixNewLines = function (content) {

            var codeBlocks = content.match(/<pre.*?>[^]*?<\/pre>/mg);

            console.log('codeBlocks', codeBlocks);

            if(codeBlocks == null) return content;
            for(var index=0; index < codeBlocks.length; index++) {
                content = content.replace(codeBlocks[index], codeBlocks[index].replace(/<br\s*\/?>/mgi, "\n"));
            }
            return content;
        };

        $('.code-syntax-highlighter-editor').livequery(function(){

          var plugin , toolbar1 , toolbar2 ,
            self = this,
            _moduleId = $(this).parent().attr("id"),
            plugins = [
                "advlist autolink charmap",
                "wordcount visualchars visualblocks",
                "directionality paste"
            ];

          tinymce.init({
              selector: "#" + $(this).attr("id"),
              plugins: plugins,

              toolbar : false,
              menubar: false,
              inline: true,
              //toolbar_items_size: 'small',
              resize: false,
              object_resizing : false ,
              //br_in_pre: false,
              entity_encoding: "raw",
              //nowrap : true,
              paste_as_text: true,
              //paste_merge_formats: false,

              setup: function(editor) {

                editor.on('BeforeSetContent', function (e) {
                    console.log('BeforeSetContent event', e);
                    e.content = fixNewLines(e.content);
                });

                editor.on('SaveContent', function (e) {
                    console.log('SaveContent event', e);
                    e.content = fixNewLines(e.content);
                });

                editor.on('GetContent', function (e) {
                    console.log('GetContent event', e);
                    e.content = fixNewLines(e.content);
                });

                 var edId = this.id;

                 editor.on('change', function(e) {

                    var content = this.getContent({format : 'text'});

                    var postId = api.pageBuilder.getPostId( $("#" + _moduleId) ),
                        children = api.contentBuilder.getShortcodeChildren( _moduleId );

                    if(children.length != 1){
                        alert("In Text Editor content not Allowed using any shortcodes");
                        return ;
                    }

                    var contentModel = children[0];

                    if(contentModel.tag != "content"){
                        alert("your shortcode incorrect , shortcode not AS content model");
                        return ;
                    }

                    contentModel.content = content;
                    api.contentBuilder.updateShortcode( contentModel );

                 });

              }

            });

         });  */

    });

}(sedApp, jQuery));