/**
 * app-preset-plugin.js
 *
 * Copyright, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://www.siteeditor.org/license
 * Contributing: http://www.siteeditor.org/contributing
 */

/*global siteEditor:true */
(function( exports, $ ){

	var api = sedApp.editor;

	api.PresetsCollections = api.PresetsCollections || {};

	var currentShortcode = '' ,
		currentPresetList ,
        currentSettingsSelector = '';

	//helper function for add to core functions or add to core ajax class
	api.fn.requestFail = function( jqXHR, textStatus, errorThrown ) {

		var message;

		if (jqXHR.textStatus === 0) {
			message = api.I18n.disconnect ;
		} else if (jqXHR.textStatus == 404) {
			message = api.I18n.not_found;
		} else if (jqXHR.textStatus == 500) {
			message = api.I18n.internal_error;
		} else if (errorThrown === 'parsererror') {
			message = api.I18n.parser_error;
		} else if (errorThrown === 'timeout') {
			message = api.I18n.timeout;
		} else if (errorThrown === 'abort') {
			message = api.I18n.abort;
		} else {
			message = api.I18n.uncaught + jqXHR.responseText;
		}

		return message;
	};
	/**
	 * @api.AppPreset
	 *
	 * @constructor
	 * @augments Backbone.Model
	 */
	api.AppPreset = api.Class.extend({
	    /*
            @pageType : post || term ( || general || authors || post_type )
        */
        initialize: function( options ){
			var self = this;

			this.defaultPresetsChanges = {};

            $.extend( this, options || {} );

			/*
			* @Render App Preset View For All Main Shortcodes
			* @Main Shortcodes === Modules
			* @create settings only after click on preset settings button(in first time)
			*/
			this.appPresetView = {};

			/*
			 * using 'presetSettings' @namespace for prevent unbind other click events for this button
			 */
            $('.sed_preset_settings_button').livequery(function(){
                $(this).on( "click.presetSettings" ,function(){

					var shortcodeName = $(this).data("shortcodeName");

					currentShortcode = shortcodeName;

					if( _.isUndefined( api.PresetsCollections[shortcodeName] ) ) {
						api.PresetsCollections[shortcodeName] = new api.PresetList;
					}

                    currentSettingsSelector = "#dialog_page_box_" + currentShortcode + "_preset_settings";

					if( _.isUndefined( self.appPresetView[shortcodeName] ) ) {
                        self.appPresetView[shortcodeName] = new api.SedAppPresetView({
                            el: currentSettingsSelector
                        });
                    }

                })
            }, function() {
                // unbind the change event
                $(this).unbind('click.presetSettings');
            });

			api.addFilter('sedDefaultPatternsFilter', function ( patterns ) {
				console.log( "----------------self.defaultPresetsChanges--------------" , self.defaultPresetsChanges );
				if( !_.isEmpty( self.defaultPresetsChanges ) ) {
					$.each(self.defaultPresetsChanges, function (shortcode_name, content) {
						patterns[shortcode_name] = content;
					});
				}

				return patterns;
			});

			//when change preset ::  current element updated
			api.previewer.bind( 'changeCurrentElementByChangePreset', function( dataEl ) {
				api.appModulesSettings.updateByChangePattern( dataEl );
			});

			api.previewer.bind( "ok_sedRemovePresetConfirm" , function () {
				var modelView = $("#sed-confirm-message-dialog").data( "modelView" );
				modelView.clear();
				$("#sed-confirm-message-dialog").removeData( "modelView" );
			});

			api.previewer.bind( "cancel_sedRemovePresetConfirm" , function () {
				$("#sed-confirm-message-dialog").removeData( "modelView" );
			});

        },

		getCurrentContent : function () {
			var type = api.sedShortcode.getModelsType(),
				collection;

			if( type == "theme" )
				collection = api.pagesThemeContent[api.settings.page.id];
			else
				collection = api.postsContent[api.settings.page.id];

			var shortcodes = api.sedShortcode.findModelsById( collection , api.currentTargetElementId );

			var cloneShortcodes = api.sedShortcode.clone( shortcodes );

			return cloneShortcodes;
		}

	});

	/**
	 * @api.ModulePreset : Preset Model Class
	 * @For each preset create one model
	 *
	 * @Preset Model Attributes
	 * ---------------------------
	 *	@id            : '' ,
	 *	@title         : '' ,
	 *	@author        : '' ,
	 *	@content       : {} ,
	 *	@name          : '' ,
	 *	@status        : 'publish' ,
	 *	@date          : new Date() ,
	 *	@modified      : new Date() ,
	 *	@menuOrder     : '' ,
	 *	@shortcode     : module ,
	 *	@nonces        : {
	 *		 @'update'      : false,
	 *		 @'delete'      : false,
	 *		 @'edit'        : false
	 *	}
	 * -----------------------------
	 */
	api.ModulePreset = Backbone.Model.extend({

		/**
		 * Triggered when preset details change
		 * Overrides Backbone.Model.sync
		 *
		 * @param {string} method
		 * @param {api.ModulePreset} model
		 * @param {Object} [options={}]
		 *
		 * @returns {Promise}
		 */
		sync: function( method, model, options ) { 

			options = options || {};

			options.context     = this;
			options.url         = SEDAJAX.url;//api.settings.url.ajax;
			options.dataType    = 'json';

			this.syncMethod = method;

			this.trigger("startRequest" , [ method , model, options ]);

            if ( 'create' === method ) {

                options.data = _.extend( options.data || {}, {
                    action          : 'sed_create_preset',
                    sed_page_ajax   : 'create_preset' ,
                    shortcode       : this.get("shortcode") ,
					title			: this.get("title") ,
					content			: JSON.stringify( this.get("content") ) ,
					menu_order		: this.get("menuOrder") ,
                    nonce           : api.addOnSettings.presetSettings.nonce.create
                });

            }

			// If the attachment does not yet have an `id`, return an instantly
			// rejected promise. Otherwise, all of our requests will fail.
			if ( 'create' !== method && _.isUndefined( this.id ) ) {
				return $.Deferred().rejectWith( this ).promise();
			}

            if ( 'read' === method ) {

				options.data = _.extend( options.data || {}, {
					action			: 'sed_get_preset',
					id              : this.id ,
					sed_page_ajax   : 'get_preset' ,
                    nonce           : api.addOnSettings.presetSettings.nonce.get
				});

			// Overload the `update` request so properties can be saved.
			} else if ( 'update' === method ) {
				// If we do not have the necessary nonce, fail immeditately.
				if ( ! this.get('nonces') || ! this.get('nonces').update ) {
					return $.Deferred().rejectWith( this ).promise();
				}

                options.data = _.extend( options.data || {}, {
                    action          : 'sed_save_preset',
                    id              : this.id ,
                    sed_page_ajax   : 'save_preset' ,
					shortcode       : this.get("shortcode") ,
					nonce			: this.get("nonces").update
                });

				// Record the values of the changed attributes.
				if ( model.hasChanged() ) {
					options.data.changes = {};

					_.each( model.changed, function( value, key ) {
						options.data.changes[ key ] = ( key == "content" ) ? JSON.stringify( this.get( key ) ) : this.get( key );
					}, this );
				}

			// Overload the `delete` request so attachments can be removed.
			// This will permanently delete an attachment.
			} else if ( 'delete' === method ) {
				// If we do not have the necessary nonce, fail immeditately.
				if ( ! this.get('nonces') || ! this.get('nonces').delete ) {
					return $.Deferred().rejectWith( this ).promise();
				}

				if ( ! options.wait ) {
					this.destroyed = true;
				}

				options.data = _.extend( options.data || {}, {
					action			: 'sed_delete_preset',
					id              : this.id ,
					sed_page_ajax   : 'delete_preset' ,
					nonce			: this.get("nonces").delete
				});

				/*return this._deferred = api.wpAjax.send( options ).done( function() {
					this.destroyed = true;
				}).fail( function() {
					this.destroyed = false;
				});*/

			}

			if( $.inArray( method , ['create' , 'update' , 'read' , 'delete' ] ) > -1 ) {

				var self = this;

				return this._deferred = api.wpAjax.send( options ).done( function() {

						}).fail( function( ) {
							var message = '';
							if( arguments.length == 1 && !_.isUndefined( arguments[0].message ) ){
								message = arguments[0].message;
							}else if( arguments.length == 3 && _.isEmpty(  ) ){
								message = api.fn.requestFail.apply( this, arguments  )
							}else{
								message = 'Data sink is encountered a problem because of an unknown error in the server ';
							}

							messageView( message );

							//api.PresetsCollections[currentShortcode].message = message;
							//model.trigger("errorModel" , [ model, resp , options , method ]);
						});

			// Otherwise, fall back to `Backbone.sync()`.
			}else {
				/**
				 * Call `sync` directly on Backbone.Model
				 */
				return Backbone.Model.prototype.sync.apply( this, arguments );
			}
		}

	});

	api.PresetList = Backbone.Collection.extend({

		// Reference to this collection's model.
		model: api.ModulePreset,

        initialize: function() {

            this.args = {
                posts_per_page  : -1 ,
                offset          : 0  ,
                orderby         : 'menu_order' ,
                order           : 'ASC' ,
                post_status     : 'publish' ,
            };

        },
		// We keep the Presets in sequential order, despite being saved by unordered
		// GUID in the database. This generates the next order number for new items.
		nextOrder: function(){
			if (!this.length) return 1;
			return this.last().get('menuOrder') + 1;
		},

		setToDefaultToggle: function( preset ){
			this.each( function( model ){

				if( preset.id == model.id ) {
					model.save({ isDefault: ! model.get("isDefault") });
				}else if( preset.id != model.id && model.get("isDefault") === true ) {
					model.set({isDefault: false});
				}

			});

		},

		validate: function( title ) {

			var pattern = /^[A-Za-z0-9_\-\s]{3,35}$/;

			if( _.isUndefined( title ) || _.isEmpty( title ) || ! title || ! pattern.test( title) ){
				this.message = "Preset title is not valid.";
				messageView( this.message );
				return false;
			}

			return true;
		},

        sync: function( method, collection, options ) {

            var args;

            // Overload the read method so Attachment.fetch() functions correctly.
            if ( 'read' === method ) {

                options = options || {};

                options.context     = this;
                options.url         = SEDAJAX.url;//api.settings.url.ajax;
                options.dataType    = 'json';

                options.data = _.extend( options.data || {}, {
                    action          : 'sed_module_presets' ,
                    sed_page_ajax   : 'module_presets_loader' ,
					shortcode		: currentShortcode ,
                    nonce           : api.addOnSettings.presetSettings.nonce.collection
                });

                // Clone the args so manipulation is non-destructive.
                args = _.clone( this.args );

                // Determine which page to query.
                if ( -1 !== args.posts_per_page ) {
                    args.paged = Math.round( this.length / args.posts_per_page ) + 1;
                }

                options.data.query = args;
                return api.wpAjax.send( options );


            } else if( 'update' === method ){

                options = options || {};

                options.context     = this;
                options.url         = SEDAJAX.url;//api.settings.url.ajax;
                options.dataType    = 'json';

                options.data = _.extend( options.data || {}, {
                    action          : 'sed_save_presets',
                    sed_page_ajax   : 'save_presets' ,
                    nonce           : api.addOnSettings.presetSettings.nonce.saveCollection
                });

                options.data.changes = {};

                collection.each(function( model ){

                    if ( model.hasChanged() ) {

                        if( _.isUndefined( options.data.changes[model.id] ) )
                            options.data.changes[model.id] = {};

                        _.each( model.changed, function( value, key ) {
                            options.data.changes[model.id][ key ] = ( key == "content" ) ? JSON.stringify( model.get( key ) ) : model.get( key );
                        }, this );
                    }

                });

                return api.wpAjax.send( options );

            // Otherwise, fall back to Backbone.sync()
            }else{
                /**
                 * Call `sync` directly on Backbone.Model
                 */
                return Backbone.sync.apply( this, arguments );
            }

        },

		// Presets are sorted by their original insertion order.
		comparator : 'menuOrder'

	});

	api.PresetView = Backbone.View.extend({

		//... is a list tag.
		tagName:  "li",

		// Cache the template function for a single item.
		template: api.template( 'sed-preset-item' ),

		// The DOM events specific to an item.
		events: {
			'click [data-action="load"]'        : "load",
			'click [data-action="edit"]'        : "edit",
			'click [data-action="default"]'     : "setToDefault",
			'click [data-action="remove"]'      : "allowClear",
			"dblclick .sed-preset-item"         : "edit",
			"keypress .preset-edit"             : "updateOnEnter",
			"blur .preset-edit"                 : "close"
		},

		// The PresetView listens for changes to its model, re-rendering. Since there's
		// a one-to-one correspondence between a **Preset** and a **PresetView** in this
		// app, we set a direct reference on the model for convenience.
		initialize: function() {

			this.default = this.$('[data-action="default"]');
			this.editPresetLoading 	= this.$(".sed-edit-preset-loading");

			this.listenTo(this.model, 'change' , this.render);
			this.listenTo(this.model, 'destroy', this.remove);
			//this.listenTo(this.model, 'invalid', this.remove);
			this.listenTo( this.model, 'sync', this.syncPreset );
			//this.listenTo( this.model, 'startRequest', this.startRequest );
			//this.listenTo( this.model , 'errorModel'   , this.errorHandler );

			this.$el.data( "modelId" , this.model.id );

			this.editPending = false;

		},

		// Re-render the titles of the preset item.
		render: function() {

			this.$el.html( this.template(this.model.toJSON()) );

			this.input = this.$('.preset-edit');

			return this;
		},

        /*syncPreset : function ( model , response, options ) { alert("syncPreset");
			if( model.syncMethod == "create" ){

			}else if( model.syncMethod == "update" ){

			}
        } ,

		startRequest : function ( method , model, options ) { alert("startRequest");

		} ,

		errorHandler : function( model , response, option ){
			alert("ERROR2.........."); console.log( "--------------arguments-----------" , arguments );
		},*/

		load : function () {
            api.previewer.send( "sedLoadNewPreset" , this.model.get("content") )
		} ,

		edit : function () {
			this.$el.addClass("editing");
			this.input.focus();
		} ,

		setToDefault : function () {
			api.PresetsCollections[currentShortcode].setToDefaultToggle( this.model );
			$(currentSettingsSelector).find('[data-action="default"]').removeClass( "sed-default" );

			var isDefault = this.model.get("isDefault") ,
				shortcodeName = this.model.get("shortcode"),
				content = this.model.get("content");

			this.$('[data-action="default"]').toggleClass( "sed-default" , this.model.get("isDefault") );

			if( isDefault ) {
				api.appPreset.defaultPresetsChanges[shortcodeName] = content;

				api.previewer.send('sedSetAsDefaultPreset', {
					name		: shortcodeName,
					content		: content
				});
			}else{
				if( !_.isUndefined( api.appPreset.defaultPresetsChanges[shortcodeName] ) )
					delete api.appPreset.defaultPresetsChanges[shortcodeName];

				api.previewer.send('sedSetAsDefaultPreset', {
					name		: shortcodeName,
					content		: api.defaultPatterns[shortcodeName] ,
				});
			}
		} ,

		allowClear : function () {

			$("#sed-confirm-message-dialog").dialog("open");

			$("#sed-confirm-message-dialog").data("confirmEventId", "sedRemovePresetConfirm");

			$("#sed-confirm-message-dialog").data("modelView", this);

			$("#sed-confirm-message-dialog").html($("#sed-remove-preset-confirm-tpl").html());

		} ,

		clear : function () {
			this.model.destroy();
		} ,

		updateOnEnter : function (e) {
			if (e.keyCode == 13)
				this.close();
		} ,

		close : function () {
			var value = this.input.val() ,
				self = this;


			if( api.PresetsCollections[currentShortcode].validate( value ) ){

				if( this.input.hasClass("sed-error") )
					this.input.removeClass("sed-error");

				if( this.model.get("title") != value ) {
					this.$(".sed-edit-preset-loading").show();

					this.editPending = true;

					this.model.save({
						title: value
					},{
						success: function (model, response) {
							self.$(".sed-edit-preset-loading").hide();
							self.$el.removeClass("editing");
							this.editPending = false;
						},
						error: function (model, response) {
							self.$(".sed-edit-preset-loading").hide();
							self.$el.removeClass("editing");
							this.editPending = false;
						}
					});
				}else if( this.editPending === false ){
					self.$el.removeClass("editing");
				}

			}else {
				if( ! this.input.hasClass("sed-error") )
					this.input.addClass("sed-error");
			}
		} ,

	});

	var messageView = function( message ){
		var alertTemplate = api.template( 'sed-module-preset-message' );
		$(currentSettingsSelector).find(".sed-preset-error-box").html(
			alertTemplate({
				message : message
			})
		).slideDown( 300 ).delay( 5000 ).fadeOut( 400 );
	};

	// Our overall **AppView** is the top-level piece of UI.
	api.SedAppPresetView = Backbone.View.extend({

		// Our template for the line of statistics at the bottom of the app.
		alertTemplate: api.template( 'sed-module-preset-message' ),

		// Delegated events for creating new items, and clearing completed ones.
		events: {
			'keypress .sed-new-preset'          :  "createOnEnter",
			'click [data-action="add"]'         :  "addPreset",
			'click [data-action="override"]'    :  "overrideContent"
		},

		// At initialization we bind to the relevant events on the `Presets`
		// collection, when items are added or changed. Kick things off by
		// loading any preexisting presets that might be saved in *localStorage*.
		initialize: function() {

			this.input      			= this.$(".sed-new-preset");
			this.select     			= this.$(".sed-presets-list-select");
			this.list       			= this.$(".sed-presets-list");
			this.alert      			= this.$(".sed-preset-error-box");
			this.settingsLoading 		= this.$(".sed-preset-settings-loading");
			this.addPresetLoading 		= this.$(".sed-add-preset-loading");
			this.overridePresetLoading	= this.$(".sed-override-preset-loading");

			this.listenTo( api.PresetsCollections[currentShortcode] , 'add'   	, this.addOne );
			this.listenTo( api.PresetsCollections[currentShortcode] , 'reset' 	, this.addAll );
			this.listenTo( api.PresetsCollections[currentShortcode] , 'all'   	, this.render );

            this.fetch();

            this.sortable();

		},

        fetch : function() {

            //read current module presets
            this.settingsLoading.show();
            var self = this;

            api.PresetsCollections[currentShortcode].fetch().done(function( response ) {
                self.settingsLoading.hide();
            }).fail( function( ) {
                self.settingsLoading.hide();
                var message = '';
                if( arguments.length == 1 && !_.isUndefined( arguments[0].message ) ){
                    message = arguments[0].message;
                }else if( arguments.length == 3 && _.isEmpty(  ) ){
                    message = api.fn.requestFail.apply( this, arguments  )
                }else{
                    message = 'Data sink is encountered a problem because of an unknown error in the server ';
                }

                messageView( message );

            });

        },

        sortable: function() {

            var presetList = this.list;

            presetList.sortable({
                handle: '[data-action="sort"]' ,
                update : function( e , ui){

                    var orders = api.PresetsCollections[currentShortcode].pluck("menuOrder"),
                        total = presetList.find("li").length;

                    presetList.find("li").each(function(index , elm){
                        var modelId = $(this).data("modelId");
                        var model = api.PresetsCollections[currentShortcode].findWhere({ id : modelId }) ,
                            newOrder = total - index;
                        if( newOrder != model.get("menuOrder") ){
                            model.set( "menuOrder" , newOrder );
                        }
                    });

                    api.PresetsCollections[currentShortcode].sort();
                    api.PresetsCollections[currentShortcode].sync( "update" , api.PresetsCollections[currentShortcode] );

                }
            }).disableSelection();

        },

		// Re-rendering the App just means refreshing the statistics -- the rest
		// of the app doesn't change.
		render: function() {
			var template = api.template( 'sed-preset-select-item' ) ,
				self = this ,
				html = '';

			this.select.html( '' );

			api.PresetsCollections[currentShortcode].each( function( model ){
				self.select.prepend( template( model.toJSON() ) );
			});

			this.select.prepend( template({
				id		: '' ,
				title 	: "Select Preset"
			}));

			if( !_.isUndefined( api.PresetsCollections[currentShortcode].message ) && api.PresetsCollections[currentShortcode].message ){
				this.alert.html(
					this.alertTemplate({
						message : api.PresetsCollections[currentShortcode].message
					})
				);
			}

		},

		errorHandler : function( collection, response, option ){
			alert("ERROR2.........."); console.log( "--------------arguments-----------" , arguments );
		},

		// Add a single preset item to the list by creating a view for it, and
		// appending its element to the `<ul>`.
		addOne: function( preset ) {

			if( !preset.isValid() ){
				alert( preset.validationError );
				preset.destroy();
				return ;
			}

			var view = new api.PresetView({model: preset});
			this.list.prepend(view.render().el);

		},

		// Add all items in the **Presets** collection at once.
		addAll: function() {
			api.PresetsCollections[currentShortcode].each(this.addOne, this);
		},

		// If you hit return in the main input field, create new **Preset** model,
		createOnEnter: function(e) {

			if (e.keyCode != 13) return;

			this.addPreset();

		},

		addPreset : function(){ alert("test");

			var value = this.input.val();
			if ( ! api.PresetsCollections[currentShortcode].validate( value ) ) {
				if( ! this.input.hasClass("sed-error") )
					this.input.addClass("sed-error");
				return;
			}

			if( this.input.hasClass("sed-error") )
				this.input.removeClass("sed-error");

			this.input.val('');

			this.addPresetLoading.show();

			var order = api.PresetsCollections[currentShortcode].nextOrder() ,
				self = this;

			api.PresetsCollections[currentShortcode].create({
				title		: value ,
				shortcode 	: currentShortcode ,
				content 	: api.appPreset.getCurrentContent() ,
				menuOrder	: order
			},{
				wait: true ,
				success : function(model , response, options) {
					self.addPresetLoading.hide();
				},
				error : function(model , response, options) {
					self.addPresetLoading.hide();
				},
			});

		},

		overrideContent : function(){

			if ( ! this.select.val() )
				return;

			//this.select
			var preset = api.PresetsCollections[currentShortcode].findWhere({id: parseInt( this.select.val() )}),
				self = this;

			if( !_.isUndefined( preset ) && preset ) {
				this.overridePresetLoading.show();

				var content = api.appPreset.getCurrentContent();

				preset.save({
					content: content
				},{
					success : function(model , response, options) {
						self.overridePresetLoading.hide();
					},
					error : function(model , response, options) {
						self.overridePresetLoading.hide();
					},
				});

				var isDefault = preset.get("isDefault") ,
					shortcodeName = preset.get("shortcode");

				if( isDefault ) {   console.log("---------------NEW CONTENT---------------" , content);
					api.appPreset.defaultPresetsChanges[shortcodeName] = content;

					api.previewer.send('sedSetAsDefaultPreset', {
						name: shortcodeName,
						content: content
					});
				}
			}
		},

	});


    $( function() {

       api.appPreset = new api.AppPreset({
		   defaultPresetsChanges : window._sedAppDefaultPresetsChanges
	   });

    });

})( sedApp, jQuery );