(function( exports, $ ) {

    var api = sedApp.editor;
    api.shortcodeCreate = api.shortcodeCreate || {} ;
    api.currentWidgetContent = api.currentWidgetContent || "";
    api.currentWidgetIdBase = api.currentWidgetIdBase || "";
    api.widgetInstance = api.widgetInstance || {};

    api.SiteEditorWidgets = api.Class.extend({
        initialize: function( params , options ){
            var self = this;

            this.ajaxWidgetRequest = [];

            $.extend( this, options || {} );

            api.Events.bind( "sedBeforeRemove" , function( elementId ){
                self.removeWidget( elementId );
            });

             api.Events.bind( "ajax_refresh_data_complete" , function( data ){
                $( '[sed_model_id="' + data.id + '"]'  ).find(".sed-loading").hide();
                $( '[sed_model_id="' + data.id + '"]' ).removeClass("module-ajax-loading-container");

            });

        },

        removeWidget : function( elementId ){  
            var shortcode = api.contentBuilder.getShortcode( elementId ) ,
                postId = api.pageBuilder.getPostId( $( '[sed_model_id="' + elementId + '"]' ) ) ,
                modulesShortcodes = api.contentBuilder.findAllTreeChildrenShortcode( elementId , postId ) ,
                $thisValue = api( "page_widgets_list" )();

            modulesShortcodes.unshift( shortcode );

            console.log( "----modulesShortcodes widget-----" , modulesShortcodes );

            _.each( modulesShortcodes , function( model ){
                if( !_.isUndefined( model ) && !_.isUndefined( model.tag ) && model.tag == "sed_widget" ){

                    var id_base = model.attrs.id_base,
                        index = $.inArray( id_base , $thisValue );

                    if( index > -1){
                        $thisValue.splice( index , 1 );
                        api( "page_widgets_list" ).set( $thisValue );
                    }

                }
            });

        },

        widgetsHandler: function( element , name , dropItem, direction ){

            var widget = element.attrs["sed-widget-class"] ,
                widgetIdBase = element.attrs["sed-widget-id-base"] ,
                widgetClassName = element.attrs["sed-widget-classname"] ,
                tpl = $("#widget-tpl-" + widgetIdBase );

            api.currentWidgetIdBase = widgetIdBase;

            $(tpl.html()).appendTo( $("body") );

            var instance = $("#sed-app-control-widget-" + widgetIdBase).find('.widget-form').serialize() ,
                newItem = api.pageBuilder.addModuleToPost( "widget" , dropItem, direction ),
                elementId = newItem.find(':first-child > :first-child').attr("sed_model_id");

            //instance = instance.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

            api.currentWidgetIdBase = "";

            //save all widgets when add its to this page
            var $thisValue = api( "page_widgets_list" )();
            $thisValue.push( widgetIdBase );
            api( "page_widgets_list" ).set( $thisValue );
            //send to parent Iframe , binded in siteeditor/plugins/themeSynchronization/plugin.min.js
            api.preview.send( 'pageWidgetsList' , $thisValue );

            this.the_widget( widget , instance , "" , widgetIdBase , elementId , widgetClassName , newItem.attr("sed_model_id") );
        },

        the_widget: function( widget , instance , args , widgetIdBase , elementId , widgetClassName , rowId ){
            var self = this;
                  console.log("instance------------------" , instance);
            api.contentBuilder.updateShortcodeAttr( 'instance'  , instance      , elementId);
            api.contentBuilder.updateShortcodeAttr( 'widget'    , widget        , elementId);
            api.contentBuilder.updateShortcodeAttr( 'args'      , ""            , elementId);
            api.contentBuilder.updateShortcodeAttr( 'id_base'   , widgetIdBase  , elementId);
            api.contentBuilder.updateShortcodeAttr( 'class_name'   , widgetClassName  , elementId);

            switch ( api.sedWidgetsSettings[widgetIdBase].transport ) {
              case "refresh":
                  api.preview.send( 'moduleForceRefresh' );
              break;
              case "ajax_refresh":
                  $('[sed_model_id="' + rowId + '"]' ).addClass("module-ajax-loading-container");

                  if( $('[sed_model_id="' + rowId + '"]' ).find(".sed-loading").length == 0 )
                      $('<div class="sed-loading-medium-continer" ><div class="sed-loading" ></div></div>').appendTo( $('[sed_model_id="' + rowId + '"]' ) );

                  var loading = $( '[sed_model_id="' + rowId + '"]' ).find(".sed-loading");
                  loading.show();

                  api.preview.send( 'sed_ajax_refresh' , rowId );
              break;
              case "ajax":

                  if( !_.isUndefined( self.ajaxWidgetRequest[elementId] ) ){
                      if( self.ajaxWidgetRequest[elementId].processing === true ){
                          self.ajaxWidgetRequest[elementId].request.abort();
                      }
                  }

                  $( '[sed_model_id="' + rowId + '"]' ).addClass("module-ajax-loading-container");

                  var widgetAjaxloader = new api.Ajax({
                      data : {
                          widget        : widget ,
                          instance      : instance ,
                          args          : args ,
                          id_base       : widgetIdBase ,
                          class_name    : widgetClassName ,
                          action        : 'widget_load',
                          nonce         : api.addOnSettings.widgets.nonce ,
                          sed_page_ajax : 'sed_widget_loader'
                      },
                      loadingType : "medium" ,
                      success : function(){
                          ////api.log( this.response );
                          var html = this.response.data.output || api.I18n.empty_widget;

                          if( !_.isUndefined( self.ajaxWidgetRequest[elementId] ) )
                              self.ajaxWidgetRequest[elementId].processing = false;

                          var scripts = api.sedWidgetsSettings[widgetIdBase].scripts ,
                              styles  = api.sedWidgetsSettings[widgetIdBase].styles;

                          var _callback = function(){
                              api.currentWidgetContent = html;

                              $( '[sed_model_id="' + rowId + '"]' ).removeClass("module-ajax-loading-container");
                              api.Events.trigger( "syncModuleTmpl" , elementId , "sed_widget" );
                              api.currentWidgetContent = "";
                          };

                          if($.isArray( scripts )  && scripts.length > 0 ){

                              if($.isArray( styles )  && styles.length > 0 )
                                  api.pageBuilder.moduleStylesLoad( styles );

                              api.pageBuilder.moduleScriptsLoad( scripts , _callback );

                          }else if($.isArray( styles )  && styles.length > 0 ){

                              api.pageBuilder.moduleStylesLoad( styles , _callback );
                          }else{
                              _callback();
                          }

                      },

                      error : function(){
                          if( !_.isUndefined( self.ajaxWidgetRequest[elementId] ) )
                              self.ajaxWidgetRequest[elementId].processing = false;

                         $( '[sed_model_id="' + rowId + '"]' ).removeClass("module-ajax-loading-container");
                         alert( this.response.data.output );
                      }

                  },{
                      container   :  '[sed_model_id="' + rowId + '"]'
                  });

                  if( !_.isUndefined( widgetAjaxloader.request ) ){
                      widgetAjaxloader.request.fail(function(){
                          self.ajaxWidgetRequest[elementId].processing = false;
                      });

                      self.ajaxWidgetRequest[elementId] = {
                          processing  :  true  ,
                          request     :  widgetAjaxloader.request
                      };

                  }

              break;
            }



        },

		/**
		 * Find all inputs in a widget container that should be considered when
		 * comparing the loaded form with the sanitized form, whose fields will
		 * be aligned to copy the sanitized over. The elements returned by this
		 * are passed into this._getInputsSignature(), and they are iterated
		 * over when copying sanitized values over to the the form loaded.
		 *
		 * @param {jQuery} container element in which to look for inputs
		 * @returns {jQuery} inputs
		 * @private
		 */
		_getInputs: function( container ) {
			return $( container ).find( ':input[name]' );
		},

        paramToObject: function( instance , idBase ){
            if(!instance)
                return {};

            var val = decodeURIComponent(instance.replace(/\+/g," "));
            var fvals = val.split("&") , $thisVal , context = {};

            $.each(fvals , function(index , value){
                var param = value.split("=");
                var property = param[0].replace("widget-" + idBase + "[__i__]","");
                property = property.replace(/[\[\]]/g , "");

                context[property] = param[1] || "";
            });

            return context;
        },

        do_widget: function( instance , source , idBase ){
            var self = this , context;

            context = this.paramToObject( instance , idBase );

            var template = Handlebars.compile(source);
            content  = template(context);

            return content;
        }

    });




    /*api.ShortcodeContentBuilder = api.ShortcodeBuilder.extend({


    }); */

    $( function() {
       //api.postsContent = window._sedAppPostsContent ;
       /*  styles = window._sedAppPageBuilderModulesStyles;*/
       api.widgetTpls = window._sedAppEditorWidgetTpls;
       api.sedWidgetsSettings = window._sedAppEditorWidgetsSettings;

        api.widgetBuilder = new api.SiteEditorWidgets({} , {
            preview : api.preview,
            //postsContent : api.postsContent,
            //shortcodes : api.shortcodes
        });


        api.preview.bind( 'ajax_refresh_data' , function( data ) {
            api.Events.trigger( "ajax_refresh_data_complete" , data );
            $( '[sed_model_id="' + data.id + '"]' ).replaceWith( data.html );

		});

        api.preview.bind( 'current_widget' , function( widget ) {
            api.currentWidget = widget;   console.log(" api.currentWidget" ,  api.currentWidget);
		});

        api.Events.bind( "setWidgetInstance" , function( modules , elementId ){

            var idBase = api.currentWidget.idBase ,
                fieldName = api.currentWidget.fieldName.replace("widget-" + idBase + "[__i__]","");

            fieldName = fieldName.replace(/[\[\]]/g , "");

            var attr = idBase + "_" + fieldName ,
            instance = modules[elementId][api.currentAttr] ,
            val = decodeURIComponent(instance.replace(/\+/g," "));
            var fvals = val.split("&") , $thisVal;

            $.each(fvals , function(index , value){
                var param = value.split("=");
                if(param[0] == api.currentWidget.fieldName){
                    $thisVal = param[1];
                    return false;
                }
            });

            if(api.widgetInstance[attr])
                api.widgetInstance[attr]( elementId , $thisVal , idBase );
            else if(api.widgetTpls[idBase]){
                api.currentWidgetContent = api.widgetBuilder.do_widget( instance , api.widgetTpls[idBase] , idBase );

                api.Events.trigger( "syncModuleTmpl" , elementId , "sed_widget" );
                api.currentWidgetContent = "";
            }else{
                var rowId = $( '[sed_model_id="' + elementId + '"]' ).parents(".sed-pb-module-container:first").parent().attr("sed_model_id");

                //instance = instance.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

                api.widgetBuilder.the_widget( api.currentWidget.phpClass , instance , "" , idBase , elementId , api.currentWidget.className , rowId );
            }
            //api.Events.trigger( "syncModuleTmpl" , elementId , api.currentShortcode );

        });


        api.widgetInstance.calendar_title = function( elementId , value , idBase ){

            var wTitle = $( '[sed_model_id="' + elementId + '"]' ).find('.widget-title');
            if(wTitle.length > 0)
                wTitle.html( value );
            else
                $('<h2 class="widget-title">' + value  + '</h2>').prependTo( $( '[sed_model_id="' + elementId + '"]' ).find('>.widget_calendar') );

        };


        //pageBuilder.render();
    });

}(sedApp, jQuery));