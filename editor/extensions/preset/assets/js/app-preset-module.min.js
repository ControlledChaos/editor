(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppPreset = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            api.preview.bind( 'sedLoadNewPreset', function( presetPattern ) {
                var newPattern = api.sedShortcode.clone( presetPattern );
                    elementId = api.currentSedElementId ,
                    currIndex = api.contentBuilder.getShortcodeIndex( elementId );

                var parentC = $( '[sed_model_id="' + elementId + '"]' ).parents(".sed-pb-post-container:first"),
                    type = parentC.data("contentType") ,
                    postId = api.pageBuilder.getPostId( $( '[sed_model_id="' + elementId + '"]' ) );

                if(type == "theme")
                    var contentModel = api.pagesThemeContent[postId];
                else
                    var contentModel = api.postsContent[postId];

                var mainShortcode = api.contentBuilder.getShortcode( elementId ) ,
                    parentId = mainShortcode.parent_id,
                    moduleChildren = api.contentBuilder.findAllTreeChildren( parentId , postId ) ;
                    moduleLength = moduleChildren.length;

                newPattern = api.pageBuilder.loadPattern( newPattern , parentId );
                newPattern = api.pageBuilder.setHelperShortcodes( newPattern , mainShortcode.tag , "tag" );
                newPattern = api.pageBuilder.shortcodesPatternFilter( newPattern );

                var args = $.merge([ currIndex , moduleLength ] , newPattern);

                Array.prototype.splice.apply( contentModel , args );

                api.pageBuilder.syncStyleEditorPreview( newPattern );

                api.currentSedElementId = newPattern[0].id;

                api.contentBuilder.refreshModule( parentId );

                api.preview.send( 'changeCurrentElementByChangePreset', {
                    elementId       : newPattern[0].id ,
                    shortcode_name  : newPattern[0].tag ,
                    attrs           : newPattern[0].attrs
                });

                //api.selectPlugin.select( $( '[sed_model_id="' + newPattern[0].id + '"]' ) , false );
            });

            api.preview.bind( 'sedSetAsDefaultPreset', function( obj ) {
                api.defaultPatterns[obj.name] = obj.content;
            });



            //this.ready();
        },

    });


    $( function() {

        api.appPreset = new api.AppPreset({});

    });

}(sedApp, jQuery));