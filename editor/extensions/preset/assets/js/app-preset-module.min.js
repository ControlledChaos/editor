(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppPreset = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            api.preview.bind( 'sedLoadNewPreset', function( presetPattern ) {
                var newPattern = api.sedShortcode.clone( presetPattern );
                    elementId = api.currentSedElementId ;

                var mainShortcode = api.contentBuilder.getShortcode( elementId ) ,
                    parentId = mainShortcode.parent_id;

                //create new pattern
                newPattern = api.pageBuilder.loadPattern( newPattern , parentId ); 

                //set helper id for add shortcode pattern id
                newPattern = api.pageBuilder.setHelperShortcodes( newPattern , mainShortcode.tag , "tag" );

                //shortcode pattern filter
                newPattern = api.pageBuilder.shortcodesPatternFilter( newPattern );

                console.log( "-----NNNNN-----presetPattern----NNNNNN------------" , newPattern );

                var _callback = function(){

                    //replace new pattern with old shortcodes models
                    api.sedShortcode.replaceModel( elementId , newPattern );

                    //send data to top iframe for save ready
                    api.contentBuilder.sendData();

                    //apply design editor css in preview
                    api.pageBuilder.syncStyleEditorPreview( newPattern );

                    //Current Element Id refresh
                    api.currentSedElementId = newPattern[0].id;

                    var _completePatternLoad = function(){

                        var patternScripts = api.sedShortcode.getPatternScripts( newPattern );

                        var patternStyles = api.sedShortcode.getPatternStyles( newPattern );

                        if( $.isArray( patternScripts ) && patternScripts.length > 0 )
                            api.pageBuilder.moduleScriptsLoad( patternScripts );

                        if( $.isArray( patternStyles ) && patternStyles.length > 0 )
                            api.pageBuilder.moduleStylesLoad( patternStyles );

                        api.preview.send( 'changeCurrentElementByChangePreset', {
                            elementId       : newPattern[0].id ,
                            shortcode_name  : newPattern[0].tag ,
                            attrs           : newPattern[0].attrs
                        });

                    };

                    var transport = api.sedShortcode.getPatternTransport( newPattern );

                    if( transport == "ajax" ){

                        var _success = function( response ){

                            $( '[sed_model_id="' + parentId + '"]' ).replaceWith( response.data );

                            _completePatternLoad();

                            var shortcode = api.contentBuilder.getShortcode( elementId );

                            api.Events.trigger( "sedAfterRefreshModule" , elementId , shortcode , response.data );

                        };

                        api.pageBuilder.ajaxLoadModules( parentId, _success );

                    }else {

                        //refresh module in @DOM
                        api.contentBuilder.refreshModule(parentId);

                        _completePatternLoad();

                    }


                    //api.selectPlugin.select( $( '[sed_model_id="' + newPattern[0].id + '"]' ) , false );

                };

                var modulesEditorJs = api.sedShortcode.getPatternModulesScripts( newPattern );

                console.log( "----------modulesEditorJs------------" , modulesEditorJs );

                if( !_.isEmpty( modulesEditorJs) ){
                    var scripts = api.pageBuilder._checkLoadedScript( modulesEditorJs , api.pageBuilder.wpScripts );
                    if($.isArray( scripts )  && scripts.length > 0 )
                        api.pageBuilder.moduleScriptsLoad( scripts , _callback );
                    else
                        _callback();
                }else
                    _callback();

            });

            api.preview.bind( 'sedSetAsDefaultPreset', function( obj ) {
                api.defaultPatterns[obj.name] = obj.content;
            });

            //this.ready();
        },

    });


    $( function() {

        api.appPreset = new api.AppPreset({});

    });

}(sedApp, jQuery));