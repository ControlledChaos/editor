/**
 * SiteEditor Posts JS Plugin
 *
 * Copyright, 2016
 * Released under LGPL License.
 *
 * License: http://www.siteeditor.org/license
 * Contributing: http://www.siteeditor.org/contributing
 */

/*global siteEditor:true */
(function( exports, $ ){

    var api = sedApp.editor;


    api.SliderControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				slider = this.container.find('.sed-bp-form-slider-container');

			this.sliderInputValue = this.container.find(".slider-demo-value");

            this.sliderOptions =  {
                min     : 0 ,
                max     : 100 ,
                step    : 1 ,
                value   : 10 ,
                range   : "min"
            };

            this.slider = slider;

            if ( ! _.isUndefined( control.params.min ) ) {
                this.sliderOptions.min = control.params.min;
            }

            if ( ! _.isUndefined( control.params.max ) ) {
                this.sliderOptions.max = control.params.max;
            }

            if ( ! _.isUndefined( control.params.step ) ) {
                this.sliderOptions.step = control.params.step;
            }

            if( !_.isNull( control.defaultValue ) ) {
                this.sliderOptions.value = control.defaultValue;
            }

            var _lazyRefresh = _.debounce(function( value ){
                control.refresh( value );
            }, 50);

            this.sliderOptions.slide = function( event, ui ) {
		        control.sliderInputValue.val( ui.value );
                _lazyRefresh( ui.value );
		    };

			slider.slider( this.sliderOptions );

        },

        _update: function( val ){

            //this.slider.slider( "value", val );

            //this.sliderInputValue.val( val );

        }

    });

    api.SortableControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				sortable = this.container.find('.sed-bp-form-sortable');

            this.sortableOptions =  {}; 
            this.sortable = sortable;


			sortable.sortable({
		      items: "li.sed-bp-form-sortable-item"
		    }); 
			sortable.disableSelection(); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });

    api.DateControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				date = this.container.find('.sed-bp-form-datepicker-input');

            this.dateOptions =  {}; 
            this.date = date;


			date.datepicker(); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });

    api.DimensionControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				dimension = this.container.find('.sed-bp-dimension-input');  

            this.dimension = dimension;

			// Save the value
			this.dimension.on( 'change keyup paste', function() {

				var value = $( this ).val();

				// Validate the value and show a warning if it's invalid.
				// We did this once when initializing the field, but we need to re-evaluate
				// every time the value changes.
				if ( false === control._validate( value ) ) {

					control.container.find( '.sed-bp-form-dimension' ).addClass( 'invalid' );

				} else {

					control.container.find( '.sed-bp-form-dimension' ).removeClass( 'invalid' );

					control.refresh( value );

				}

			});

        },

        _validate: function ( value ) {

			var validUnits = ['rem', 'em', 'ex', '%', 'px', 'cm', 'mm', 'in', 'pt', 'pc', 'ch', 'vh', 'vw', 'vmin', 'vmax'],
			    numericValue,
			    unit;

			// 0 is always a valid value
			if ( '0' === value ) {
				return true;
			}

			// If we're using calc() just return true.
			if ( 0 <= value.indexOf( 'calc(' ) && 0 <= value.indexOf( ')' ) ) {
				return true;
			}

			// Get the numeric value.
			numericValue = parseFloat( value );

			// Get the unit
			unit = value.replace( numericValue, '' );

			// Check the validity of the numeric value.
			if ( isNaN( numericValue ) ) {
				return false;
			}

			// Check the validity of the units.
			if ( -1 === $.inArray( unit, validUnits ) ) {
				return false;
			}

			return true;

		}, 

        _update: function( val ){ 

            if(!val){
            	val = "";
            }    
         
			this.dimension.val( val );

			// Validate the value and show a warning if it's invalid
			if ( false === this._validate( val ) ) {
				this.container.find( '.sed-bp-form-dimension' ).addClass( 'invalid' );
			} else {
				this.container.find( '.sed-bp-form-dimension' ).removeClass( 'invalid' );
			}

           // this.sliderAmount.val( val );

        }

    });

    api.CodeControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				element = this.container.find('.sed-pb-codemirror-editor');

            this.codeOptions =  {}; 
            this.code = element;

            if ( typeof control.params.mode !== undefined ) {
                this.codeOptions.mode = control.params.mode;
            }
			// HTML mode requires a small hack because CodeMirror uses 'htmlmixed'.
			if ( 'html' === control.params.mode ) {
				this.codeOptions.mode = 'htmlmixed';
			}

			//this.codeOptions.theme = control.params.mode;
			this.codeOptions.lineNumbers = true;

			SedCodeMirror = CodeMirror.fromTextArea( element[0], this.codeOptions);

			// On change make sure we infor the Customizer API
			/*SedCodeMirror.on( 'change', function() {
				control.setting.set( editor.getValue() );
			});

			// Hack to refresh the editor when we open a section
			element.parents( '.accordion-section' ).on( 'click', function() {
			    editor.refresh();
			});*/
    alert("jkhui"); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });


    api.MulticolorControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				picker = this.container.find('.sed-colorpicker');

            this.picker = picker;

            var colorPickerOptionBG = _.clone( colorPickerOption );

            picker.val( '' );

            if( !_.isUndefined( this.params.show_input ) )
                colorPickerOptionBG.showInput = this.params.show_input;

            var _refresh = function( color ){

                color = _.isNull( color ) ? "transparent" : color.toString();
                control.refresh( color );

            };

            var _lazyRefresh = _.debounce(function( color ){
                _refresh( color );
            }, 20);

            colorPickerOptionBG.change = function (color) {
                _refresh( color );
            };

            colorPickerOptionBG.move = function (color) {
                _lazyRefresh( color );
            };

            colorPickerOptionBG.dragstop = function (color) {
                _refresh( color );
            };

            colorPickerOptionBG.hide = function(color) {
                _refresh( color );
            };

            this.picker.spectrum(colorPickerOptionBG);
        },

        _update: function( val ){ 
            val = ( val == "transparent" ) ? "" : val;
            this.picker.spectrum("set", val);
        }

    });


    api.controlConstructor = $.extend( api.controlConstructor, {
        slider             : api.SliderControl,
        sortable           : api.SortableControl,
        date               : api.DateControl,
        dimension          : api.DimensionControl,
        code               : api.CodeControl,
        multicolor         : api.MulticolorControl,
    });



    $( function() {


    });

})( sedApp, jQuery );