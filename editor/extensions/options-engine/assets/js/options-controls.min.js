/**
 * SiteEditor Posts JS Plugin
 *
 * Copyright, 2016
 * Released under LGPL License.
 *
 * License: http://www.siteeditor.org/license
 * Contributing: http://www.siteeditor.org/contributing
 */

/*global siteEditor:true */
(function( exports, $ ){

    var api = sedApp.editor;


    api.SliderControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				slider = this.container.find('.sed-bp-form-slider-container');

			this.sliderAmount = this.container.find("#slider-amount");

            this.sliderOptions =  {};
            this.slider = slider;

            if ( typeof control.params.min !== undefined ) {
                this.sliderOptions.min = control.params.min;
            }

            if ( typeof control.params.max !== undefined ) {
                this.sliderOptions.max = control.params.max;
            }

            /*if ( control.params.step ) {
                this.sliderOptions.step = control.params.step;
            }*/

            if ( control.params.default_value ) {
                this.sliderOptions.value = control.params.default_value;
            }else{
            	this.sliderOptions.value = 10;	
            }

            this.sliderOptions.range = "min";   

            this.sliderOptions.slide = function( event, ui ) {
		        control.sliderAmount.val( ui.value );
		        control.refresh( ui.value ); 
		    };

           /* if ( control.params.page ) {
                this.sliderOptions.page = control.params.page;
            }

            if ( control.params.lock &&  control.params.lock.id &&  control.params.lock.slider ) {
                 this.lock = $("#" + control.params.lock.id);
                 this.sliderConnect = $(control.params.lock.slider);
                 this.controlsConnect = control.params.lock.controls || [];
            }*/

			slider.slider( this.sliderOptions ); 

			//this.sliderAmount.val( this.setting.get() );
            
            //slider.slider(this.sliderOptions); 
                        //spin   spinchange
            /*slider.on("spinstop keyup", function(e,ui){
                var spVal = $(this).val();

                if( !_.isUndefined( control.lock ) && control.lock.prop('checked') && !_.isUndefined( control.sliderConnect ) ){
                    control.sliderConnect.val( spVal );

                    _.each(control.controlsConnect , function( controlId ){
                        var spControl = api.control.instance( controlId );

                        spControl.refresh( spVal );

                    });
                }

                control.refresh( spVal );
            });*/

        },

        _update: function( val ){ 

            this.sliderAmount.val( val );

        }

    });

    api.SortableControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				sortable = this.container.find('.sed-bp-form-sortable');

            this.sortableOptions =  {}; 
            this.sortable = sortable;


			sortable.sortable({
		      items: "li.sed-bp-form-sortable-item"
		    }); 
			sortable.disableSelection(); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });

    api.DateControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				date = this.container.find('.sed-bp-form-datepicker-input');

            this.dateOptions =  {}; 
            this.date = date;


			date.datepicker(); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });

    api.DimensionControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				dimension = this.container.find('.sed-bp-dimension-input');  

            this.dimension = dimension;

			// Save the value
			this.dimension.on( 'change keyup paste', function() {

				var value = $( this ).val();

				// Validate the value and show a warning if it's invalid.
				// We did this once when initializing the field, but we need to re-evaluate
				// every time the value changes.
				if ( false === control._validate( value ) ) {

					control.container.find( '.sed-bp-form-dimension' ).addClass( 'invalid' );

				} else {

					control.container.find( '.sed-bp-form-dimension' ).removeClass( 'invalid' );

					control.refresh( value );

				}

			});

        },

        _validate: function ( value ) {

			var validUnits = ['rem', 'em', 'ex', '%', 'px', 'cm', 'mm', 'in', 'pt', 'pc', 'ch', 'vh', 'vw', 'vmin', 'vmax'],
			    numericValue,
			    unit;

			// 0 is always a valid value
			if ( '0' === value ) {
				return true;
			}

			// If we're using calc() just return true.
			if ( 0 <= value.indexOf( 'calc(' ) && 0 <= value.indexOf( ')' ) ) {
				return true;
			}

			// Get the numeric value.
			numericValue = parseFloat( value );

			// Get the unit
			unit = value.replace( numericValue, '' );

			// Check the validity of the numeric value.
			if ( isNaN( numericValue ) ) {
				return false;
			}

			// Check the validity of the units.
			if ( -1 === $.inArray( unit, validUnits ) ) {
				return false;
			}

			return true;

		}, 

        _update: function( val ){ 

            if(!val){
            	val = "";
            }    
         
			this.dimension.val( val );

			// Validate the value and show a warning if it's invalid
			if ( false === this._validate( val ) ) {
				this.container.find( '.sed-bp-form-dimension' ).addClass( 'invalid' );
			} else {
				this.container.find( '.sed-bp-form-dimension' ).removeClass( 'invalid' );
			}

           // this.sliderAmount.val( val );

        }

    });

    api.CodeControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				element = this.container.find('.sed-pb-codemirror-editor');

            this.codeOptions =  {}; 
            this.code = element;

            if ( typeof control.params.mode !== undefined ) {
                this.codeOptions.mode = control.params.mode;
            }
			// HTML mode requires a small hack because CodeMirror uses 'htmlmixed'.
			if ( 'html' === control.params.mode ) {
				this.codeOptions.mode = 'htmlmixed';
			}

			//this.codeOptions.theme = control.params.mode;
			this.codeOptions.lineNumbers = true;

			SedCodeMirror = CodeMirror.fromTextArea( element[0], this.codeOptions);

			// On change make sure we infor the Customizer API
			/*SedCodeMirror.on( 'change', function() {
				control.setting.set( editor.getValue() );
			});

			// Hack to refresh the editor when we open a section
			element.parents( '.accordion-section' ).on( 'click', function() {
			    editor.refresh();
			});*/
    alert("jkhui"); 

        },

        _update: function( val ){ 

           // this.sliderAmount.val( val );

        }

    });


    api.MulticolorControl = api.SiteEditorControls.extend({

        _ready: function() {

			var control = this ,
				picker = this.container.find('.sed-colorpicker');

            this.picker = picker;

            var colorPickerOptionBG = _.clone( colorPickerOption );

            picker.val( '' );

            if( !_.isUndefined( this.params.show_input ) )
                colorPickerOptionBG.showInput = this.params.show_input;

            var _refresh = function( color ){

                color = _.isNull( color ) ? "transparent" : color.toString();
                control.refresh( color );

            };

            var _lazyRefresh = _.debounce(function( color ){
                _refresh( color );
            }, 20);

            colorPickerOptionBG.change = function (color) {
                _refresh( color );
            };

            colorPickerOptionBG.move = function (color) {
                _lazyRefresh( color );
            };

            colorPickerOptionBG.dragstop = function (color) {
                _refresh( color );
            };

            colorPickerOptionBG.hide = function(color) {
                _refresh( color );
            };

            this.picker.spectrum(colorPickerOptionBG);
        },

        _update: function( val ){ 
            val = ( val == "transparent" ) ? "" : val;
            this.picker.spectrum("set", val);
        }

    });


    api.controlConstructor = $.extend( api.controlConstructor, {
        slider             : api.SliderControl,
        sortable           : api.SortableControl,
        date               : api.DateControl,
        dimension          : api.DimensionControl,
        code               : api.CodeControl,
        multicolor         : api.MulticolorControl,
    });



    $( function() {


    });

})( sedApp, jQuery );