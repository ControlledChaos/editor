(function( exports, $ ){
    
    var api = sedApp.editor;

    api.pageSettings = api.pageSettings || {};

    api.SiteEditorPageOptionsPreview = api.Class.extend({

        /**
         * Initialize SiteEditor Page Options Preview
         * 
         * @param options : Class Options
         */
        initialize: function ( options ) {

            var self = this;

            this.data = {
                settings        : {} ,
                publicOption    : '' ,
                layoutOption    : '' ,
                privateOption   : ''
            };

            this.currentScope = 'public';

            $.extend( this, options || {} );

            api( "page_options_scope", function (value) {
                value.bind(function (to) {
                    var _scope = to[api.currentPageInfo.id];
                    self.changeScope( _scope );
                });
            });

            this.settingsBind();

        } ,

        getPageSetting : function ( id ) {

            var self = this ,
                allScopes = api( "page_options_scope" )() ,
                currentScope = ( _.isObject( allScopes ) && ! _.isUndefined( allScopes[api.currentPageInfo.id] ) ) ? allScopes[api.currentPageInfo.id] : "public-scope",
                settingId;

            switch ( currentScope ){

                case "public-scope" :

                    settingId = self.data.publicOption.replace( "##id##" , id );

                    break;

                case "layout-scope" :

                    settingId = self.data.layoutOption.replace( "##id##" , id );

                    break;

                case "page-customize-scope" :

                    settingId = self.data.privateOption.replace( "##id##" , id );

                    break;

            }

            return api.has( settingId ) ? api( settingId ).get() : null;

        } ,

        settingsBind : function ( ) {

            var self = this;

            console.log( "-------------this.data.settings-----------------" , this.data.settings );

            $.each( this.data.settings , function( id , args ){

                if( args.transport == "postMessage" ){

                    var publicSId  = self.data.publicOption.replace( "##id##" , id ) ,
                        layoutSId  = self.data.layoutOption.replace( "##id##" , id ) ,
                        privateSId = self.data.privateOption.replace( "##id##" , id ) ,
                        groupSettings = {
                            "public"    : publicSId  ,
                            "layout"    : layoutSId  ,
                            "private"   : privateSId
                        };

                    $.each( groupSettings , function( type , settingId ) {
                        api( settingId , function (value) {
                            value.bind(function (to) {

                                var allScopes = api( "page_options_scope" )() ,
                                    currentScope = ( _.isObject( allScopes ) && ! _.isUndefined( allScopes[api.currentPageInfo.id] ) ) ? allScopes[api.currentPageInfo.id] : "public-scope";
                                    scope = '';

                                switch ( currentScope ){

                                    case "public-scope" :
                                        scope = "public";
                                        break;

                                    case "layout-scope" :
                                        scope = "layout";
                                        break;

                                    case "page-customize-scope" :
                                        scope = "private";
                                        break;

                                }

                                if( scope !== type ){
                                    return ;
                                }

                                if( !_.isUndefined( api.pageSettings[id] ) && _.isFunction( api.pageSettings[id] ) ){
                                    api.pageSettings[id]( to , settingId , type );
                                }

                            });
                        });
                    });

                }

            });

        } ,

        changeScope : function ( currentScope ) {

            var self = this ,
                forceRefresh = false;

            $.each( this.data.settings , function( id , args ){

                if( args.transport == "refresh" ){

                    forceRefresh = true;

                    return false;//breck each

                }

            });

            if( forceRefresh === true ){
                api.preview.send( 'previewerForceRefresh' );
            }else{

                $.each( this.data.settings , function( id , args ){

                    var settingId ,
                        type;

                    switch ( currentScope ){

                        case "public-scope" :
                            settingId  = self.data.publicOption.replace( "##id##" , id );
                            type = "public";
                            break;

                        case "layout-scope" :
                            settingId  = self.data.layoutOption.replace( "##id##" , id );
                            type = "layout";
                            break;

                        case "page-customize-scope" :
                            settingId = self.data.privateOption.replace( "##id##" , id );
                            type = "private";
                            break;

                    }

                    if( !_.isUndefined( api.pageSettings[id] ) && _.isFunction( api.pageSettings[id] ) ){
                        api.pageSettings[id]( api( settingId )() , settingId , type );
                    }

                });

            }

        }

    });

    $( function() {

        var _pageOptionsData = window._sedAppPreviewPageOptionsData;
        var _themeFeatures   = window._sedThemeFeaturesSettings;

        api.pagesOptionsPreview = new api.SiteEditorPageOptionsPreview({
            data : _pageOptionsData
        });

        var _pageLayoutWidthSet = function( $page_length , $sheet_width ){

            var css = '';

            if( $page_length == "boxed" ) {

                css += _themeFeatures['site_layout_feature'].selector;
                css += ",.sed-row-boxed{";
                css += "max-width : " + $sheet_width + " !important;";
                css += "}";

            }else{

                css += _themeFeatures['site_layout_feature'].selector;
                css += "{max-width : 100% !important;}";

                css += ".sed-row-boxed{";
                css += "max-width : " + $sheet_width + " !important;";
                css += "}";

            }

            $("#sedPageLayoutWidthstyle").remove();

            $("<style id='sedPageLayoutWidthstyle'>" + css + " </style>").appendTo( $("head") );

        };

        api.pageSettings.page_length = function( newValue , settingId , type ){ alert( newValue );

            var sheet_width = api.pagesOptionsPreview.getPageSetting( 'sheet_width' );

            var page_length = newValue;

            if( _.isNull( sheet_width ) || _.isNull( page_length ) ){
                alert( "Error Null Value" );
                return ;
            }

            _pageLayoutWidthSet( page_length , sheet_width );

            var targEl = $("#site-editor-main-part");

            if(newValue == "boxed")
                targEl.addClass( "sed-row-boxed" ).removeClass("sed-row-wide");
            else
                targEl.addClass( "sed-row-wide" ).removeClass("sed-row-boxed");

            $("#site-editor-main-part").find(".sed-row-pb > .sed-pb-module-container").trigger("sedChangedPageLength" , [newValue]);

        };

        api.pageSettings.sheet_width = function( newValue , settingId , type ){

            var sheet_width = newValue;

            var page_length = api.pagesOptionsPreview.getPageSetting( 'page_length' );

            _pageLayoutWidthSet( page_length , sheet_width  );

            $("#site-editor-main-part").find(".sed-row-pb > .sed-pb-module-container").trigger("sedChangedSheetWidth");

        };


    });


})( sedApp, jQuery );